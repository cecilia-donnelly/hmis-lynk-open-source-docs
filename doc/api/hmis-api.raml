#%RAML 0.8
#baseUri: http://examplehmis.com/{version}
#baseUri: http://mocksvc.mulesoft.com/mocks/ce8f5253-0423-4d20-9364-98b1c088bae7/{version}
baseUri: http://mocksvc.mulesoft.com/mocks/8036c37e-54d8-448a-82c8-02e0e62d1120/mocks/ce8f5253-0423-4d20-9364-98b1c088bae7/{version}
securedBy: [oauth_2_0]
title: HMIS API
version: 1
protocols:
  -  HTTPS
securitySchemes:
  - oauth_2_0:
      settings:
        accessTokenUri: http://examplehmis.com/1/oauth2/token
        authorizationUri: http://examplehmis.com/1/oauth2/authorize
        scopes: [user, administrator]
        authorizationGrants: [ owner ] #resource owner password credential grant used, since the client doesn't own the data (https://tools.ietf.org/html/rfc6749)
      description: |
        The HMIS API supports OAuth 2.0 for authenticating all API requests.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
              description: |
                 Used to send a valid OAuth 2 access token. Do not use
                 an "access_token" query string parameter.
              type: string
        responses:
          401:
              description: |
                  Bad or expired token. This can happen if the user or the HMIS
                  revoked or expired an access token. To fix, you should re-
                  authenticate the user.
          403:
              description: |
                  Bad OAuth request (wrong consumer key, bad nonce, expired
                  timestamp...). Unfortunately, re-authenticating the user won't help here.
resourceTypes:
  -  collection:
      description: "Operations performed on the set of all HMIS <<resourcePathName>> within the system, and for adding a new <<resourcePathName|!singularize>> to the set of <<resourcePathName>> "
      get:
        #securedBy: [oauth_2_0: { scopes: [ user ] } ]
        description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
        queryParameters:
          CreatedByUserID:
            description: searches for members of the collection created by a particular user
            type: "string"
            example: Smith12
          CreatedAfter:
            description: searches for members of the collection created after (inclusive) a particular date
            type: "date"
            example: 10-11-2011
          CreatedBefore:
            description: searches for members of the collection created before (inclusive) a particular date
            type: "date"
            example: 10-11-2012
          UpdatedAfter:
            description: searches for members of the collection updated after (inclusive) a particular date
            type: "date"
            example: 10-11-2011
          UpdatedBefore:
            description: searches for members of the collection updated before (inclusive) a particular date
            type: "date"
            example: 10-11-2012
        responses:
          200:
            description: OK – Everything is working.
            body:  
              application/json:
                schema: <<schema_json>>
          400: 
            description: Bad Request – The request was invalid or cannot be served.
          403: 
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404: 
            description: Not found – There is no resource behind the URI.
          500:
            description: 500 – Internal Server Error
      put:
        #securedBy: [oauth_2_0: { scopes: [ user ] } ]
        description: Bulk update to multiple <<resourcePathName|!pluralize>>.
        body:
          application/json:
            schema: <<schema_array_json>>
          application/xml:
            schema: <<schema_array_xml>>
        responses:
          200: 
            description: OK – Everything is working.
          304:
            description: Not Modified – The client can use cached data.
          400: 
            description: Bad Request – The request was invalid or cannot be served.
          403: 
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404: 
            description: Not found – There is no resource behind the URI.
          422:
            description: Unprocessable Entity - Request body is incorrect.
          500:
            description: 500 – Internal Server Error
      post:
        description: |
          Add a <<resourcePathName|!singularize>>
        body:
          application/json:
            schema: <<schema_json>>
          application/xml:
            schema: <<schema_xml>>
        responses:
          201:
            description: OK - New resource has been created.
            body:
              application/json:
                schema: <<id_schema_json>>
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
          404: 
            description: Not found – There is no resource behind the URI.
          422:
            description: Unprocessable Entity - Request body is incorrect.
          500:
            description: 500 – Internal Server Error.
      delete:
        description: Deletes all members of the collection
        responses:
          204: 
            description: OK – The resources were successfully deleted.
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
          404:
            description: Not found – There are no resources behind the URI.
          500:
            description: 500 – Internal Server Error
  -  member:
      get:
        description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
        responses:
          200:
            description: OK – Everything is working.
            body:
              application/json:
                schema: <<schema_json>>
              application/xml:
                schema: <<schema_xml>>
          400:
            description: Bad Request – The request was invalid or cannot be served. 
          401:
            description: Unauthorized – The request requires an user authentication.
          403: 
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500: 
            description: Internal Server Error
      put:
        description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        responses:
          200:
            description: OK – Everything is working.
          304:
            description: Not Modified – The client can use cached data.
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires a user.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: Internal Server Error.
      delete: 
        description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        responses: 
          204:
            description: OK – The resource was successfully deleted.
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401: 
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: Internal Server Error.
/clients:
  type: {
    collection: {
        id_schema_json: client_id_json,  
        schema_json:  client_json,
        schema_xml:  client_xml,
        schema_array_json: clients_json,
        schema_array_xml: clients_xml
    }
  }
  get:
    queryParameters:
      FirstName:
        type: "string"
        example: "Bill"
      MiddleName:
        type: "string"
        example: Frances 
      LastName:
        type: "string"
        example: Smith
      DOB:
        type: "date"
        example: 10-11-2012
    responses:
      200:
        body:  
          application/json:
            example: |
              "client_ids":[{"PersonalID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"PersonalID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
            schema: client_ids_json
  put:
    body:
      application/json:
        example: |
          {"clients":[{"PersonalID":"csssssaassasfdfreswssaaasdffrfre","FirstName":"Bill","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"},{"PersonalID":"abcsteaassasrdyreswssaaasdffrfre","FirstName":"Jim","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"gsmith"}]
          }
      application/xml:
        example: |
          <hmis:Clients>
            <hmis:Client hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59"
            hmis:userID="ned100">
              <hmis:PersonalID>A1a1</hmis:PersonalID>
              <hmis:FirstName>Edward</hmis:FirstName>
              <hmis:MiddleName>Barnaby</hmis:MiddleName>
              <hmis:LastName>Jones</hmis:LastName>
              <hmis:NameSuffix>Sr.</hmis:NameSuffix>
              <hmis:NameDataQuality>9</hmis:NameDataQuality>
              <hmis:SSN>7xxx9xx8x</hmis:SSN>
              <hmis:SSNDataQuality>2</hmis:SSNDataQuality>
              <hmis:DOB>2014-11-18</hmis:DOB>
              <hmis:DOBDataQuality>1</hmis:DOBDataQuality>
              <hmis:Gender>3</hmis:Gender>
              <hmis:OtherGender>intersex</hmis:OtherGender>
              <hmis:Ethnicity>0</hmis:Ethnicity>
              <hmis:Race>8</hmis:Race>
              <hmis:VeteranStatus>9</hmis:VeteranStatus>
            </hmis:Client>
            <hmis:Client hmis:dateCreated="2014-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
              <hmis:PersonalID>B2a1</hmis:PersonalID>
              <hmis:FirstName>Tanya</hmis:FirstName>
              <hmis:MiddleName>Hartwell</hmis:MiddleName>
              <hmis:LastName>Drake</hmis:LastName>
              <hmis:NameSuffix>Jr.</hmis:NameSuffix>
              <hmis:NameDataQuality>9</hmis:NameDataQuality>
              <hmis:SSN>7xxx9xx8x</hmis:SSN>
              <hmis:SSNDataQuality>2</hmis:SSNDataQuality>
              <hmis:DOB>2014-11-18</hmis:DOB>
              <hmis:DOBDataQuality>1</hmis:DOBDataQuality>
              <hmis:Gender>3</hmis:Gender>
              <hmis:OtherGender>intersex</hmis:OtherGender>
              <hmis:Ethnicity>0</hmis:Ethnicity>
              <hmis:Race>8</hmis:Race>
              <hmis:VeteranStatus>9</hmis:VeteranStatus>
            </hmis:Client>
          </hmis:Clients>
  post:
    body:
      application/json:
        example: |
          {"PersonalID":"csssssaassasfdfreswssaaasdffrfre","FirstName":"Bill","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"}
        schema: client_json
      application/xml:
        example: |
          <hmis:Client hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
              <hmis:PersonalID>A1a1</hmis:PersonalID>
              <hmis:FirstName>Edward</hmis:FirstName>
              <hmis:MiddleName>Barnaby</hmis:MiddleName>
              <hmis:LastName>Jones</hmis:LastName>
              <hmis:NameSuffix>Sr.</hmis:NameSuffix>
              <hmis:NameDataQuality>9</hmis:NameDataQuality>
              <hmis:SSN>7xxx9xx8x</hmis:SSN>
              <hmis:SSNDataQuality>2</hmis:SSNDataQuality>
              <hmis:DOB>2014-11-18</hmis:DOB>
              <hmis:DOBDataQuality>1</hmis:DOBDataQuality>
              <hmis:Gender>3</hmis:Gender>
              <hmis:OtherGender>intersex</hmis:OtherGender>
              <hmis:Ethnicity>0</hmis:Ethnicity>
              <hmis:Race>8</hmis:Race>
              <hmis:VeteranStatus>9</hmis:VeteranStatus>
            </hmis:Client>
        schema: client_xml
    responses:
      201:
        description: Returns the ID of the newly created client.
        body:
          application/json:
            schema: client_id_json
            example: |
              {"PersonalID":"csssssaassasfdfreswssaaasdffrfre"}
  /{client_id}:
    uriParameters:
      client_id:
        displayName: Client Identifier 
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  client_json
        schema_xml:  client_xml
    get:
      responses:
        200:
          body:  
            application/json:
              example: |
                {"PersonalID":"csssssaassasfdfreswssaaasdffrfre","FirstName":"Bill","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"}
            application/xml:
              example: |
                <hmis:Client hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">  
                  <hmis:PersonalID>A1a1</hmis:PersonalID>
                  <hmis:FirstName>Edward</hmis:FirstName>
                  <hmis:MiddleName>Barnaby</hmis:MiddleName>
                  <hmis:LastName>Jones</hmis:LastName>
                  <hmis:NameSuffix>Sr.</hmis:NameSuffix>
                  <hmis:NameDataQuality>9</hmis:NameDataQuality>
                  <hmis:SSN>7xxx9xx8x</hmis:SSN>
                  <hmis:SSNDataQuality>2</hmis:SSNDataQuality>
                  <hmis:DOB>2014-11-18</hmis:DOB>
                  <hmis:DOBDataQuality>1</hmis:DOBDataQuality>
                  <hmis:Gender>3</hmis:Gender>
                  <hmis:OtherGender>intersex</hmis:OtherGender>
                  <hmis:Ethnicity>0</hmis:Ethnicity>
                  <hmis:Race>8</hmis:Race>
                  <hmis:VeteranStatus>9</hmis:VeteranStatus>
                </hmis:Client>
    /enrollments:
      type: {
        collection: {
            id_schema_json: enrollment_id_json,  
            schema_json:  enrollment_json,
            schema_xml:  enrollment_xml,
            schema_array_json: enrollments_json,
            schema_array_xml: enrollments_xml
        }
      }
      description: Work with enrollments for a particular client.
      get:
        description: Fetches all the enrollment ids for a given client, or a subset of them, if a query parameter is used.
        #securedBy: [oauth_2_0: { scopes: [ user ] } ]
        queryParameters:
        responses:
          200:
            body:  
              application/json:
                example: |
                  "enrollment_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                schema: enrollment_ids_json
      post:
        description: Adds an enrollment for a given client. 
      put:
        description: Bulk update of enrollments for a given client
      delete:
        description: Bulk deletion of a client's enrollments.
      /{enroll_id}:
        type:
          member:
            schema_json:  enrollment_json
            schema_xml:  enrollment_xml
        description: Work with a specific enrollment for a particular client.
        uriParameters:
          enroll_id:
            displayName: Enrollment Identifier 
            type: string
            example: ADBC1111211111114111111111D1111V
        get:
          description: Fetches one specific enrollment for a given client.
        put:
          description: Updates one specific enrollment for a specific client.
          body:
            application/json:
              example: |
                {
                  "ProjectEntryID" : "12345678901234567890123456789012",
                  "PersonalID" : "ADBC1111211111114111111111D1111V",
                  "ProjectID" : "99123456789012345678901234567890"
                  "EntryDate" : "10-12-2014",
                  "HouseholdID" : "77123456789012345678901234567890",
                  "ResidencePrior" : "3",
                  "DateCreated" : "2012-04-23T18:25:43.511Z",
                  "DateUpdated" : "2013-04-23T18:25:43.511Z",
                  "UserID": "77123456789012345678901234567890"
                }
            application/xml:
              example: |
                <hmis:Enrollment hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                  <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                  <hmis:PersonalID>A1a1</hmis:PersonalID>
                  <hmis:ProjectID>222D</hmis:ProjectID>
                  <hmis:EntryDate>2016-04-12Z</hmis:EntryDate>
                  <hmis:HouseholdID>a34563w</hmis:HouseholdID>
                  <hmis:RelationshipToHoH>1</hmis:RelationshipToHoH>
                  <hmis:ResidencePrior>12</hmis:ResidencePrior>
                  <hmis:OtherResidencePrior>some other residence text here</hmis:OtherResidencePrior>
                  <hmis:ResidencePriorLengthOfStay>8</hmis:ResidencePriorLengthOfStay>
                  <hmis:ContinuouslyHomelessOneYear>8</hmis:ContinuouslyHomelessOneYear>
                  <hmis:TimesHomelessPastThreeYears>0</hmis:TimesHomelessPastThreeYears>
                  <hmis:MonthsHomelessPastThreeYears>103</hmis:MonthsHomelessPastThreeYears>
                  <hmis:MonthsHomelessThisTime>101</hmis:MonthsHomelessThisTime>
                  <hmis:YearsHomeless>3</hmis:YearsHomeless>
                  <hmis:StatusDocumented>1</hmis:StatusDocumented>
                  <hmis:DisablingCondition>9</hmis:DisablingCondition>
                  <hmis:HousingStatus>6</hmis:HousingStatus>
                </hmis:Enrollment>
        delete:
          description: Deletes one specific enrollment for a specific client.
        /commercial_sexual_exploitations:
          type: {
            collection: {
                id_schema_json: commercialSexualExploitation_id_json,  
                schema_json:  commercialSexualExploitation_json,
                schema_xml:  commercialSexualExploitation_xml,
                schema_array_json: commercialSexualExploitations_json,
                schema_array_xml: commercialSexualExploitations_xml
              }
            }
          description: Work with commercialSexualExploitations for a particular enrollment.
          get:
            description: Fetches all the commercialSexualExploitation ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "commercialSexualExploitation_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: commercialSexualExploitation_ids_json
          post:
            description: Adds an commercialSexualExploitation for a given enrollment. 
          put:
            description: Bulk update of commercialSexualExploitations for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's commercialSexualExploitations.
          /{commercial_sexual_exploitation_id}:
            type:
              member:
                schema_json:  commercialSexualExploitation_json
                schema_xml:  commercialSexualExploitation_xml
            description: Work with a specific commercialSexualExploitation for a particular enrollment.
            uriParameters:
              commercial_sexual_exploitation_id:
                displayName: commercialSexualExploitation Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific commercialSexualExploitation for a given enrollment.
            put:
              description: Updates one specific commercialSexualExploitation for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "ExchangeForSexPastThreeMonths":"3",
                      "CountOfExchangeForSex":"24",
                      "AskedOrForcedToExchangeForSex":"12",
                      "dataCollectionStage":"4",
                      "informationDate":"12-08-2014",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:CommercialSexualExploitation hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:ExchangeForSexPastThreeMonths>3</hmis:ExchangeForSexPastThreeMonths>
                      <hmis:CountOfExchangeForSex>24</hmis:CountOfExchangeForSex>
                      <hmis:AskedOrForcedToExchangeForSex>12</hmis:AskedOrForcedToExchangeForSex>
                      <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                      <hmis:informationDate>12-08-2014</hmis:informationDate>
                      </hmis:CommercialSexualExploitation>
            delete:
              description: Deletes one specific commercial_sexual_exploitation for a specific enrollment
        /date_of_engagements:
          type: {
            collection: {
                id_schema_json: dateOfEngagement_id_json,  
                schema_json:  dateOfEngagement_json,
                schema_xml:  dateOfEngagement_xml,
                schema_array_json: dateOfEngagements_json,
                schema_array_xml: dateOfEngagements_xml
            }
          }
          description: Work with dateOfEngagements for a particular enrollment.
          get:
            description: Fetches all the dateOfEngagement ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "date_of_engagement_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: dateOfEngagement_ids_json
          post:
            description: Adds an dateOfEngagement for a given enrollment. 
          put:
            description: Bulk update of dateOfEngagements for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's dateOfEngagements.
          /{date_of_engagement_id}:
            type:
              member:
                schema_json:  dateOfEngagement_json
                schema_xml:  dateOfEngagement_xml
            description: Work with a specific dateOfEngagement for a particular enrollment.
            uriParameters:
              date_of_engagement_id:
                displayName: date_of_engagement Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific dateOfEngagement for a given enrollment.
            put:
              description: Updates one specific dateOfEngagement for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "DateOfEngagement":"12-08-2014",
                      "DateOfEngagementID":"234rftghbyujtfr56hgbdcpolimhykrng,
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:DateOfEngagement hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                       <hmis:DateOfEngagement>12-08-2014</hmis:DateOfEngagement>
                      <hmis:DateOfEngagementID>234rftghbyujtfr56hgbdcpolimhykrng</hmis:DateOfEngagementID>
                      </hmis:DateOfEngagement>
            delete:
              description: Deletes one specific dateOfEngagement for a specific enrollment
        /disabilities:
          type: {
            collection: {
                id_schema_json: disabilities_id_json,  
                schema_json:  disabilities_json,
                schema_xml:  disabilities_xml,
                schema_array_json: disabilitieses_json,
                schema_array_xml: disabilitieses_xml
              }
            }
          description: Work with disabilitieses for a particular enrollment.
          get:
            description: Fetches all the disabilities ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "disabilities_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: disabilities_ids_json
          post:
            description: Adds an disabilities for a given enrollment. 
          put:
            description: Bulk update of disabilitieses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's disabilitieses.
          /{disabilities_id}:
            type:
              member:
                schema_json:  disabilities_json
                schema_xml:  disabilities_xml
            description: Work with a specific disabilities for a particular enrollment.
            uriParameters:
              disabilities_id:
                displayName: disabilities Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific disabilities for a given enrollment.
            put:
              description: Updates one specific disabilities for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                     "ProjectEntryID" : "12345678901234567890123456789012",
                      "DisabilitiesID":"12345adr901234567890123456789012",
                      "dataCollectionStage":"4",
                      "informationDate":"12-08-2014",
                      "DisabilityType":"15",
                      "DisabilityResponse":"3",
                      "IndefiniteAndImpairs":"6",
                      "DocumentationOnFile":"5",
                      "ReceivingServices":"15",
                      "PATHHowConfirmed":"5",
                      "PATHSMIInformation":"1",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:Disabilities hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:DisabilitiesID>12345adr901234567890123456789012</hmis:DisabilitiesID>
                      <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                      <hmis:informationDate>12-08-2014</hmis:informationDate>
                      <hmis:DisabilityType>15</hmis:DisabilityType>
                      <hmis:DisabilityResponse>3</hmis:DisabilityResponse>
                      <hmis:IndefiniteAndImpairs>6</hmis:IndefiniteAndImpairs>
                      <hmis:DocumentationOnFile>5</hmis:DocumentationOnFile>
                      <hmis:ReceivingServices>15</hmis:ReceivingServices>
                      <hmis:PATHHowConfirmed>5</hmis:PATHHowConfirmed>
                      <hmis:PATHSMIInformation>1</hmis:PATHSMIInformation>
                      </hmis:Disabilities>
            delete:
              description: Deletes one specific disabilities for a specific enrollment
        /domestic_violences:
          type: {
            collection: {
                id_schema_json: domesticViolences_id_json,  
                schema_json:  domesticViolences_json,
                schema_xml:  domesticViolences_xml,
                schema_array_json: domesticViolenceses_json,
                schema_array_xml: domesticViolenceses_xml
            }
          }
          description: Work with domesticViolenceses for a particular enrollment.
          get:
            description: Fetches all the domesticViolences ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "domestic_violences_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: domesticViolences_ids_json
          post:
            description: Adds an domesticViolences for a given enrollment. 
          put:
            description: Bulk update of domesticViolenceses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's domesticViolenceses.
          /{domestic_violences_id}:
            type:
              member:
                schema_json:  domesticViolences_json
                schema_xml:  domesticViolences_xml
            description: Work with a specific domesticViolences for a particular enrollment.
            uriParameters:
              domestic_violences_id:
                displayName: domesticViolences Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific domestic_violences for a given enrollment.
            put:
              description: Updates one specific domesticViolences for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "dataCollectionStage":"4",
                      "informationDate":"12-18-2014",
                      "DomesticViolenceID":"ekiu7865tfdrbho908uyht52sdyrhbvdso",
                      "DomesticViolenceVictim":"2",
                      "WhenOccurred":"3
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:DomesticViolences hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                      <hmis:informationDate>12-18-2014</hmis:informationDate> <hmis:DomesticViolenceID>ekiu7865tfdrbho908uyht52sdyrhbvdso</hmis:DomesticViolenceID>
                       <hmis:DomesticViolenceVictim>2</hmis:DomesticViolenceVictim>
                      <hmis:WhenOccurred>3</hmis:WhenOccurred>
                      </hmis:DomesticViolences>
            delete:
              description: Deletes one specific domesticViolences for a specific enrollment
        /employments:
          type: {
            collection: {
                id_schema_json: employment_id_json,  
                schema_json:  employment_json,
                schema_xml:  employment_xml,
                schema_array_json: employments_json,
                schema_array_xml: employments_xml
              }
            }
          description: Work with employments for a particular enrollment.
          get:
            description: Fetches all the employment ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "employment_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: employment_ids_json
          post:
            description: Adds an employment for a given enrollment. 
          put:
            description: Bulk update of employments for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's employments.
          /{employment_id}:
            type:
              member:
                schema_json:  employment_json
                schema_xml:  employment_xml
            description: Work with a specific employment for a particular enrollment.
            uriParameters:
              employment_id:
                displayName: employment Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific employment for a given enrollment.
            put:
              description: Updates one specific employment for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "EmploymentID":"wedjiuy76549iurhcndre67453si987yt5j",
                      "dataCollectionStage":"4",
                      "informationDate":"11-18-2014T18:25:43.511Z",
                      "Employed":"5",
                      "EmploymentType":"23",
                      "NotEmployedReason":"6",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:Employment hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                       <hmis:EmploymentID>wedjiuy76549iurhcndre67453si987yt5j</hmis:EmploymentID>
                      <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                      <hmis:informationDate>11-18-2014</hmis:informationDate>
                      <hmis:Employed>5</hmis:Employed>
                      <hmis:EmploymentType>23</hmis:EmploymentType>
                      <hmis:NotEmployedReason>6</hmis:NotEmployedReason>
                      </hmis:Employment>
            delete:
              description: Deletes one specific employment for a specific enrollment
        /enrollment_cocs:
          type: {
            collection: {
                id_schema_json: enrollment_coc_id_json,  
                schema_json:  enrollment_coc_json,
                schema_xml:  enrollment_coc_xml,
                schema_array_json: enrollments_cocs_json,
                schema_array_xml: enrollments_coc_xml
              }
            }
          put:
            body:
              application/json:
                example: |
                  {"Enrollments":[{"EnrollmentCoCID":"csssssaassasfdfreswssaaasdffrfre","ProjectID":"csssssaassasfdfreswssaaasdffrfre","CoCCode":"AB-123","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"},       {"EnrollmentCoCID":"zxssssaassasfdfreswssaaasdffrfre","ProjectID":"abcsteaassasrdyreswssaaasdffrfre","CoCCode":"CD-456","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"psmith"}]}
          /{enrollment_coc_id}:
            get:
              body:
                application/json:
                  example: \        {"EnrollmentCoCID":"csssssaassasfdfreswssaaasdffrfre","ProjectEntryID":"csssssaassasfdfreswssaaasdffrfre","CoCCode":"AB-123",  "dataCollectionStage":"5",
                       "informationDate":"2014-04-27T18:25:43.511Z", "DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"}
        /exits:
          type: {
            collection: {
                id_schema_json: exit_id_json,  
                schema_json:  exit_json,
                schema_xml:  exit_xml,
                schema_array_json: exits_json,
                schema_array_xml: exits_xml
            }
          }
          description: Work with exits for a particular enrollment.
          get:
            description: Fetches all the exit ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "exit_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: exit_ids_json
          post:
            description: Adds an exit for a given enrollment. 
          put:
            description: Bulk update of exits for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's exits.
            
          /{exit_id}:
            type:
              member:
                schema_json:  exit_json
                schema_xml:  exit_xml
            description: Work with a specific exit for a particular enrollment.
            uriParameters:
              exit_id:
                displayName: exit Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific exit for a given enrollment.
            put:
              description: Updates one specific exit for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "ExitID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                      "ExitDate":"2012-04-27T18:25:43.511Z",
                      "Destination":"3",
                      "OtherDestination":"7",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:Exit hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:ExitID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:ExitID>
                      <hmis:ExitDate>2012-04-27T18:25:43.511Z</hmis:ExitDate>
                      <hmis:Destination>3</hmis:Destination>
                      <hmis:OtherDestination>7</hmis:OtherDestination>
                      </hmis:Exit>
            delete:
              description: Deletes one specific exit for a specific enrollment
            /connection_with_soars:
              type: {
                collection: {
                  id_schema_json: connection_with_soar_id_json,  
                  schema_json:  connection_with_soar_json,
                  schema_xml:  connection_with_soar_xml,
                  schema_array_json: connection_with_soars_json,
                  schema_array_xml: connection_with_soars_xml
                      }
                    }
              description: Work with connection_with_soars for a particular exit.
              get:
                description: Fetches all the connection_with_soar ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:  
                        application/json:
                          example: |
                            "connection_with_soar_ids":[{"ExitID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ExitID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                          schema: connection_with_soar_ids_json
              post:
                description: Adds an connection_with_soar for a given exit. 
              put:
                description: Bulk update of connection_with_soars for a given exit
              delete:
                description: Bulk deletion of a exit's connection_with_soars.
              /{connection_with_soar_id}:
                type: 
                  member: 
                    schema_json: connection_with_soar_json
                    schema_xml: connection_with_soar_xml
                description: Work with a specific connection_with_soar for a particular exit.
                uriParameters:
                  connection_with_soar_id:
                    displayName: connection_with_soar identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific connection_with_soar for a given exit
                put:
                  description: Updates one specific connection_with_soar for a given exit
                  body:
                    application/json:
                      example: |
                        {
                        "EXITID" : "12345678901234567890123456789012",
                        ...
                        "DateCreated" : "2012-04-23T18:25:43.511Z",
                        "DateUpdated" : "2013-04-23T18:25:43.511Z",
                        "UserID": "77123456789012345678901234567890"
                        }
                    application/xml:
                      example: |
                        <hmis:connection_with_soar hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                        ....
                        </hmis:connection_with_soar>
                delete:
                  description: Deletes one specific connection_with_soar for a specific exit
            /exit_housing_assessments:
              type: {
                collection: {
                  id_schema_json: exit_housing_assessment_id_json,  
                  schema_json:  exit_housing_assessment_json,
                  schema_xml:  exit_housing_assessment_xml,
                  schema_array_json: exit_housing_assessments_json,
                  schema_array_xml: exit_housing_assessments_xml
                      }
                    }
              description: Work with exit_housing_assessments for a particular exit.
              get:
                description: Fetches all the exit_housing_assessment ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:  
                        application/json:
                          example: |
                            "exit_housing_assessment_ids":[{"ExitID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ExitID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                          schema: exit_housing_assessment_ids_json
              post:
                description: Adds an exit_housing_assessment for a given exit. 
              put:
                description: Bulk update of exit_housing_assessments for a given exit
              delete:
                description: Bulk deletion of a exit's exit_housing_assessments.
              /{exit_housing_assessment_id}:
                type: 
                  member: 
                    schema_json: exit_housing_assessment_json
                    schema_xml: exit_housing_assessment_xml
                description: Work with a specific exit_housing_assessment for a particular exit.
                uriParameters:
                  exit_housing_assessment_id:
                    displayName: exit_housing_assessment identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific exit_housing_assessment for a given exit
                put:
                  description: Updates one specific exit_housing_assessment for a given exit
                  body:
                    application/json:
                      example: |
                        {
                        "ExitID" : "12345678901234567890123456789012",
                        ...
                        "DateCreated" : "2012-04-23T18:25:43.511Z",
                        "DateUpdated" : "2013-04-23T18:25:43.511Z",
                        "UserID": "77123456789012345678901234567890"
                        }
                    application/xml:
                      example: |
                        <hmis:exit_housing_assessment hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                        ....
                        </hmis:exit_housing_assessment>
                delete:
                  description: Deletes one specific exit_housing_assessment for a specific exit.
            /exit_plans_actionses:
              type: {
                collection: {
                  id_schema_json: exit_plans_actions_id_json,  
                  schema_json:  exit_plans_actions_json,
                  schema_xml:  exit_plans_actions_xml,
                  schema_array_json: exit_plans_actionses_json,
                  schema_array_xml: exit_plans_actionses_xml
                      }
                    }
              description: Work with exit_plans_actionses for a particular exit.
              get:
                description: Fetches all the exit_plans_actions ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:  
                        application/json:
                          example: |
                            "exit_plans_actions_ids":[{"ExitID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ExitID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                          schema: exit_plans_actions_ids_json
              post:
                description: Adds an exit_plans_actions for a given exit. 
              put:
                description: Bulk update of exit_plans_actionses for a given exit
              delete:
                description: Bulk deletion of a exit's exit_plans_actionses
              /{exit_plans_actions_id}:
                type: 
                  member: 
                    schema_json: exit_plans_actions_json
                    schema_xml: exit_plans_actions_xml
                description: Work with a specific exit_plans_actions for a particular exit.
                uriParameters:
                  exit_plans_actions_id:
                    displayName: exit_plans_actions identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific exit_plans_actions for a given exit
                put:
                  description: Updates one specific exit_plans_actions for a given exit
                  body:
                    application/json:
                      example: |
                        {
                        "ExitID" : "12345678901234567890123456789012",
                        ...
                        "DateCreated" : "2012-04-23T18:25:43.511Z",
                        "DateUpdated" : "2013-04-23T18:25:43.511Z",
                        "UserID": "77123456789012345678901234567890"
                        }
                    application/xml:
                      example: |
                        <hmis:exit_plans_actions hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                        ....
                        </hmis:exit_plans_actions>
                delete:
                  description: Deletes one specific exit_plans_actions for a specific exit
            /family_reunifications:
              type: {
                collection: {
                  id_schema_json: family_reunification_id_json,  
                  schema_json:  family_reunification_json,
                  schema_xml:  family_reunification_xml,
                  schema_array_json: family_reunifications_json,
                  schema_array_xml: family_reunifications_xml
                      }
                    }
              description: Work with family_reunifications for a particular exit.
              get:
                description: Fetches all the family_reunification ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:  
                        application/json:
                          example: |
                            "family_reunification_ids":[{"ExitID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ExitID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                          schema: family_reunification_ids_json
              post:
                description: Adds an family_reunification for a given exit. 
              put:
                description: Bulk update of family_reunifications for a given exit
              delete:
                description: Bulk deletion of a exit's family_reunifications.
              /{family_reunification_id}: 
                type: 
                  member: 
                    schema_json: family_reunification_json
                    schema_xml: family_reunification_xml
                description: Work with a specific family_reunification for a particular exit.
                uriParameters:
                  family_reunification_id:
                    displayName: family_reunification identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific family_reunification for a given exit
                put:
                  description: Updates one specific family_reunification for a given exit
                  body:
                    application/json:
                      example: |
                        {
                        "ExitID" : "12345678901234567890123456789012",
                        ...
                        "DateCreated" : "2012-04-23T18:25:43.511Z",
                        "DateUpdated" : "2013-04-23T18:25:43.511Z",
                        "UserID": "77123456789012345678901234567890"
                        }
                    application/xml:
                      example: |
                        <hmis:family_reunification hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                        ....
                        </hmis:family_reunification>
                delete:
                  description: Deletes one specific family_reunification for a specific exit.             
            /housing_assessment_dispositions:
              type: {
                collection: {
                  id_schema_json: housingAssessmentDisposition_id_json,  
                  schema_json:  housingAssessmentDisposition_json,
                  schema_xml:  housingAssessmentDisposition_xml,
                  schema_array_json: housingAssessmentDispositions_json,
                  schema_array_xml: housingAssessmentDispositions_xml
                      }
                    }
              description: Work with housing_assessment_dispositions for a particular client.
              get:
                description: Fetches all the housing_assessment_disposition ids for a given client, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:  
                        application/json:
                          example: |
                            "housing_assessment_disposition_ids":[{"ExitID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ExitID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                          schema: housing_assessment_disposition_ids_json
              post:
                description: Adds an housing_assessment_disposition for a given exit. 
              put:
                description: Bulk update of housing_assessment_dispositions for a given exit
              delete:
                description: Bulk deletion of a exit's housing_assessment_dispositions.
              /{housing_assessment_disposition_id}:
                type: 
                  member: 
                    schema_json: housing_assessment_disposition_json
                    schema_xml: housing_assessment_disposition_xml
                description: Work with a specific housing_assessment_disposition for a particular exit.
                uriParameters:
                  housing_assessment_disposition_id:
                    displayName: housing_assessment_disposition identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific housing_assessment_disposition for a given exit
                put:
                  description: Updates one specific housing_assessment_disposition for a given exit
                  body:
                    application/json:
                      example: |
                        {
                        "ExitID" : "12345678901234567890123456789012",
                        ...
                        "DateCreated" : "2012-04-23T18:25:43.511Z",
                        "DateUpdated" : "2013-04-23T18:25:43.511Z",
                        "UserID": "77123456789012345678901234567890"
                        }
                    application/xml:
                      example: |
                        <hmis:Housing_assessment_disposition hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                        ....
                        </hmis:Housing_assessment_disposition>
                delete:
                  description: Deletes one specific housing_assessment_disposition for a specific exit. 
            /project_completion_statuses:
              type: {
                collection: {
                  id_schema_json: project_completion_status_id_json,  
                  schema_json:  project_completion_status_json,
                  schema_xml:  project_completion_status_xml,
                  schema_array_json: project_completion_statuses_json,
                  schema_array_xml: project_completion_statuses_xml
                      }
                    }
              description: Work with project_completion_statuses for a particular exit.
              get:
                description: Fetches all the project_completion_status ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:  
                        application/json:
                          example: |
                            "project_completion_status_ids":[{"ExitID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ExitID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                          schema: project_completion_status_ids_json
              post:
                description: Adds an project_completion_status for a given exit. 
              put:
                description: Bulk update of project_completion_statuses for a given exit
              delete:
                description: Bulk deletion of a exit's project_completion_statuses.              
              /{project_completion_status_id}:
                type: 
                  member: 
                    schema_json: project_completion_status_json
                    schema_xml: project_completion_status_xml
                description: Work with a specific project_completion_status for a particular exit.
                uriParameters:
                  project_completion_status_id:
                    displayName: project_completion_status identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific project_completion_status for a given exit
                put:
                  description: Updates one specific project_completion_status for a given exit
                  body:
                    application/json:
                      example: |
                        {
                        "ExitID" : "12345678901234567890123456789012",
                        ...
                        "DateCreated" : "2012-04-23T18:25:43.511Z",
                        "DateUpdated" : "2013-04-23T18:25:43.511Z",
                        "UserID": "77123456789012345678901234567890"
                        }
                    application/xml:
                      example: |
                        <hmis:project_completion_status hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                        ....
                        </hmis:project_completion_status>
                delete:
                  description: Deletes one specific project_completion_status for a specific exit
        /former_ward_child_welfares:
          type: {
            collection: {
                id_schema_json: formerWardChildWelfare_id_json,  
                schema_json:  formerWardChildWelfare_json,
                schema_xml:  formerWardChildWelfare_xml,
                schema_array_json: formerWardChildWelfares_json,
                schema_array_xml: formerWardChildWelfares_xml
              }
            }
          description: Work with ormerWardChildWelfares for a particular enrollment.
          get:
            description: Fetches all the formerWardChildWelfare ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "formerWardChildWelfare_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: formerWardChildWelfare_ids_json
          post:
            description: Adds an formerWardChildWelfare for a given enrollment. 
          put:
            description: Bulk update of formerWardChildWelfares for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's formerWardChildWelfares.
          /{former_ward_child_welfare_id}:
            type:
              member:
                schema_json:  formerWardChildWelfare_json
                schema_xml:  formerWardChildWelfare_xml
            description: Work with a specific formerWardChildWelfare for a particular enrollment.
            uriParameters:
              former_ward_child_welfare_id:
                displayName: formerWardChildWelfare Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific formerWardChildWelfare for a given enrollment.
            put:
              description: Updates one specific formerWardChildWelfare for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "FormerWardChildWelfareID":"12345678901234567890123456789012",
                       "FormerWardChildWelfare":"3",
                       "ChildWelfareYears":"4",
                       "ChildWelfareMonths":"7",
                       "InformationDate":"2014-04-23T18:25:43.511Z",
                       "DataCollectionStage":"3",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:FormerWardChildWelfare hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID> <hmis:FormerWardChildWelfareID>12345678901234567890123456789012</hmis:FormerWardChildWelfareID>
                       <hmis:FormerWardChildWelfare>3</hmis:FormerWardChildWelfare>
                       <hmis:ChildWelfareYears>4</hmis:ChildWelfareYears>
                       <hmis:ChildWelfareMonths>7</hmis:ChildWelfareMonths>
                       <hmis:InformationDate>2014-04-23T18:25:43.511Z</hmis:InformationDate>
                       <hmis:DataCollectionStage>3</hmis:DataCollectionStage>
                      </hmis:FormerWardChildWelfare>
            delete:
              description: Deletes one specific formerWardChildWelfare for a specific enrollment
        /former_ward_juvenile_justices:
          type: {
            collection: {
                id_schema_json: formerWardJuvenileJustice_id_json,  
                schema_json:  formerWardJuvenileJustice_json,
                schema_xml:  formerWardJuvenileJustice_xml,
                schema_array_json: formerWardJuvenileJustices_json,
                schema_array_xml: formerWardJuvenileJustices_xml
              }
            }
          description: Work with formerWardJuvenileJustices for a particular enrollment.
          get:
            description: Fetches all the formerWardJuvenileJustice ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "formerWardJuvenileJustice_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: formerWardJuvenileJustice_ids_json
          post:
            description: Adds an formeWardJuvenileJustice for a given enrollment. 
          put:
            description: Bulk update of formerWardJuvenileJustices for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's formerWardJuvenileJustices.
          /{former_ward_juvenile_justice_id}:
            type:
              member:
                schema_json:  formerWardJuvenileJustice_json
                schema_xml:  formerWardJuvenileJustice_xml
            description: Work with a specific formerWardJuvenileJustice for a particular enrollment.
            uriParameters:
              former_ward_juvenile_justice_id:
                displayName: formerWardJuvenileJustice Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific formerWardJuvenileJustice for a given enrollment.
            put:
              description: Updates one specific formerWardJuvenileJustice for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "FormerWardJuvenileJusticeID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                     "FormerWardJuvenileJustice":"4",
                     "JuvenileJusticeYears":"4",
                     "JuvenileJusticeMonths":"2",
                     "dataCollectionStage":"5",
                     "informationDate":"2014-04-27T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:FormerWardJuvenileJustice hmis:dateCreated="2015-05-08T23:14:59" <hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe"><hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:FormerWardJuvenileJusticeID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:FormerWardJuvenileJusticeID>
                       <hmis:FormerWardJuvenileJustice>4</hmis:FormerWardJuvenileJustice>
                       <hmis:JuvenileJusticeYears>4</hmis:JuvenileJusticeYears>
                       <hmis:JuvenileJusticeMonths>2</hmis:JuvenileJusticeMonths>
                       <hmis:dataCollectionStage>5</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-27T18:25:43.511Z</hmis:informationDate>
                      </hmis:FormerWardJuvenileJustice>
            delete:
              description: Deletes one specific formerWardJuvenileJustice for a specific enrollment
        /health_insurances:
          type: {
            collection: {
                id_schema_json: healthInsurance_id_json,  
                schema_json:  healthInsurance_json,
                schema_xml:  healthInsurance_xml,
                schema_array_json: healthInsurances_json,
                schema_array_xml: healthInsurances_xml
              }
            }
          description: Work with healthInsurances for a particular enrollment.
          get:
            description: Fetches all the healthInsurance ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "health_insurance_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: healthInsurance_ids_json
          post:
            description: Adds an healthInsurance for a given enrollment. 
          put:
            description: Bulk update of healthInsurances for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's healthInsurances.
          /{health_insurance_id}:
            type:
              member:
                schema_json:  healthInsurance_json
                schema_xml:  healthInsurance_xml
            description: Work with a specific healthInsurance for a particular enrollment.
            uriParameters:
              health_insurance_id:
                displayName: healthInsurance Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific healthInsurance for a given enrollment.
            put:
              description: Updates one specific healthInsurance for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                     "HealthInsuranceID":"12eiuyhtfdrgb564389023retwdsvxfr",
                       "InsuranceFromAnySource":"2",
                       "Medicaid":"No",
                       "NoMedicaidReason":"2",
                       "Medicare":"0",
                       "NoMedicareReason":"1",
                       "SCHIP":"0",
                       "NoSCHIPReason":"3",
                       "VAMedicalServices":"1",
                       "NoVAMedReason":"0",
                       "EmployerProvided":"0",
                       "NoEmployerProvidedReason":"0",
                       "COBRA":"0",
                       "NoCOBRAReason":"0",
                       "PrivatePay":"2",
                       "NoPrivatePayReason":"1",
                       "StateHealthIns":"0",
                       "NoStateHealthInsReason":"1",
                       "dataCollectionStage":"4",
                       "informationDate":"2014-04-20T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:HealthInsurance hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:HealthInsuranceID>12eiuyhtfdrgb564389023retwdsvxfr</hmis:HealthInsuranceID>
                       <hmis:InsuranceFromAnySource>2</hmis:InsuranceFromAnySource>
                       <hmis:Medicaid>No</hmis:Medicaid>
                       <hmis:NoMedicaidReason>2</hmis:NoMedicaidReason>
                       <hmis:Medicare>0</hmis:Medicare>
                       <hmis:NoMedicareReason>1</hmis:NoMedicareReason>
                       <hmis:SCHIP>0</hmis:SCHIP>
                       <hmis:NoSCHIPReason>3</hmis:NoSCHIPReason>
                       <hmis:VAMedicalServices>1</hmis:VAMedicalServices>
                       <hmis:NoVAMedReason>0</hmis:NoVAMedReason>
                       <hmis:EmployerProvided>0</hmis:EmployerProvided>
                       <hmis:NoEmployerProvidedReason>0</hmis:NoEmployerProvidedReason>
                       <hmis:COBRA>0</hmis:COBRA>
                       <hmis:NoCOBRAReason>0</hmis:NoCOBRAReason>
                       <hmis:PrivatePay>2</hmis:PrivatePay>
                       <hmis:NoPrivatePayReason>1</hmis:NoPrivatePayReason>
                       <hmis:StateHealthIns>0</hmis:StateHealthIns>
                       <hmis:NoStateHealthInsReason>1</hmis:NoStateHealthInsReason>
                       <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-20T18:25:43.511Z</hmis:informationDate>
                      </hmis:HealthInsurance>
            delete:
              description: Deletes one specific healthInsurance for a specific enrollment
        /health_statuses:
          type: {
            collection: {
                id_schema_json: healthStatus_id_json,  
                schema_json:  healthStatus_json,
                schema_xml:  healthStatus_xml,
                schema_array_json: healthStatuses_json,
                schema_array_xml: healthStatuses_xml
              }
            }
          description: Work with healthStatuses for a particular enrollment.
          get:
            description: Fetches all the healthStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "healthStatus_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: healthStatus_ids_json
          post:
            description: Adds an healthStatus for a given enrollment. 
          put:
            description: Bulk update of healthStatuses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's healthStatuses.
          /{health_status_id}:
            type:
              member:
                schema_json:  healthStatus_json
                schema_xml:  healthStatus_xml
            description: Work with a specific healthStatus for a particular enrollment.
            uriParameters:
              health_status_id:
                displayName: healthStatus Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific health_status for a given enrollment.
            put:
              description: Updates one specific health_status for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "HealthStatusID":"12eiuyhtfdrgb564389023retwdsvxfr",
                       "HealthCategory":"3",
                       "HealthStatus":"3",
                       "DueDate":"2014-09-20T18:25:43.511Z",
                       "dataCollectionStage":"4",
                       "informationDate":"2014-04-20T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:HealthStatus hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:HealthStatusID>12eiuyhtfdrgb564389023retwdsvxfr</hmis:HealthStatusID>
                       <hmis:HealthCategory>3</hmis:HealthCategory>
                       <hmis:HealthStatus>3</hmis:HealthStatus>
                       <hmis:DueDate>2014-09-20T18:25:43.511Z</hmis:DueDate>
                       <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-20T18:25:43.511Z</hmis:informationDate>
                      </hmis:HealthStatus>
            delete:
              description: Deletes one specific healthStatus for a specific enrollment
        /income_and_sources:
          type: {
            collection: {
                id_schema_json: incomeAndSource_id_json,  
                schema_json:  incomeAndSource_json,
                schema_xml:  incomeAndSource_xml,
                schema_array_json: incomeAndSourcees_json,
                schema_array_xml: incomeAndSourceses_xml
              }
            }
          description: Work with incomeAndSourceses for a particular enrollment.
          get:
            description: Fetches all the incomeAndSource ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "incomeAndSource_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: income_and_source_ids_json
          post:
            description: Adds an incomeAndSource for a given enrollment. 
          put:
            description: Bulk update of incomeAndSourceses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's incomeAndSourceses.
          /{income_and_source_id}:
            type:
              member:
                schema_json:  incomeAndSource_json
                schema_xml:  incomeAndSource_xml
            description: Work with a specific incomeAndSource for a particular enrollment.
            uriParameters:
              income_and_source_id:
                displayName: incomeAndSource Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific incomeAndSource for a given enrollment.
            put:
              description: Updates one specific incomeAndSource for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "IncomeAndSourcesID":"12eiuyhtfdrgb564389023retwdsvxfr",
                       "IncomeFromAnySource":"1",
                       "TotalMonthlyIncome":"1000",
                       "Earned":"1",
                       "EarnedAmount":"0",
                       "Unemployment":"1",
                       "UnemploymentAmount":"650",
                       "SSI":"0",
                       "SSIAmount":"0",
                       "SSDI":"0",
                       "SSDIAmount":"0",
                       "VADisabilityService":"1",
                       "VADisabilityServiceAmount":"250",
                       "VADisabilityNonService":"0",
                       "VADisabilityNonServiceAmount":"0",
                       "PrivateDisability":"0",
                       "PrivateDisabilityAmount":"0",
                       "WorkersComp":"2",
                       "WorkersCompAmount":"100",
                       "TANF":"0",
                       "TANFAmount":"0",
                       "GA":"0",
                       "GAAmount":"0",
                       "SocSecRetirement":"0",
                       "SocSecRetirementAmount":"0",
                       "Pension":"0",
                       "PensionAmount":"0",
                       "ChildSupport":"0",
                       "ChildSupportAmount":"0",
                       "Alimony":"0",
                       "AlimonyAmount":"0",
                       "OtherSource":"4",
                       "OtherSourceAmount":"35",
                       "OtherSourceIdentify":"6",
                       "OtherAmount":"15",
                       "dataCollectionStage":"4",
                       "informationDate":"2014-04-20T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                    <hmis:IncomeAndSource hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:IncomeAndSourcesID>12eiuyhtfdrgb564389023retwdsvxfr</hmis:IncomeAndSourcesID>
                       <hmis:IncomeFromAnySource>1</hmis:IncomeFromAnySource>
                       <hmis:TotalMonthlyIncome>1000</hmis:TotalMonthlyIncome>
                       <hmis:Earned>1</hmis:Earned>
                       <hmis:EarnedAmount>0</hmis:EarnedAmount>
                       <hmis:Unemployment>1</hmis:Unemployment>
                       <hmis:UnemploymentAmount>650</hmis:UnemploymentAmount>
                       <hmis:SSI>0</hmis:SSI>
                       <hmis:SSIAmount>0</hmis:SSIAmount>
                       <hmis:SSDI>0</hmis:SSDI>
                       <hmis:SSDIAmount>0</hmis:SSDIAmount>
                       <hmis:VADisabilityService>1</hmis:VADisabilityService>
                       <hmis:VADisabilityServiceAmount>250</hmis:VADisabilityServiceAmount>
                       <hmis:VADisabilityNonService>0</hmis:VADisabilityNonService>
                       <hmis:VADisabilityNonServiceAmount>0</hmis:VADisabilityNonServiceAmount>
                       <hmis:PrivateDisability>0</hmis:PrivateDisability>
                       <hmis:PrivateDisabilityAmount>0</hmis:PrivateDisabilityAmount>
                       <hmis:WorkersComp>2</hmis:WorkersComp>
                       <hmis:WorkersCompAmount>100</hmis:WorkersCompAmount>
                       <hmis:TANF>0</hmis:TANF>
                       <hmis:TANFAmount>0</hmis:TANFAmount>
                       <hmis:GA>0</hmis:GA>
                       <hmis:GAAmount>0</hmis:GAAmount>
                       <hmis:SocSecRetirement>0</hmis:SocSecRetirement>
                       <hmis:SocSecRetirementAmount>0</hmis:SocSecRetirementAmount>
                       <hmis:Pension>0</hmis:Pension>
                       <hmis:PensionAmount>0</hmis:PensionAmount>
                       <hmis:ChildSupport>0</hmis:ChildSupport>
                       <hmis:ChildSupportAmount>0</hmis:ChildSupportAmount>
                       <hmis:Alimony>0</hmis:Alimony>
                       <hmis:AlimonyAmount>0</hmis:AlimonyAmount>
                       <hmis:OtherSource>4</hmis:OtherSource>
                       <hmis:OtherSourceAmount>35</hmis:OtherSourceAmount>
                       <hmis:OtherSourceIdentify>6</hmis:OtherSourceIdentify>
                       <hmis:OtherAmount>15</hmis:OtherAmount>
                       <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-20T18:25:43.511Z</hmis:informationDate>
                      </hmis:IncomeAndSource>
            delete:
              description: Deletes one specific incomeAndSource for a specific enrollment  
        /last_grade_completeds:
          type: {
            collection: {
                id_schema_json: lastGradeCompleted_id_json,  
                schema_json:  lastGradeCompleted_json,
                schema_xml:  lastGradeCompleted_xml,
                schema_array_json: lastGradeCompleteds_json,
                schema_array_xml: lastGradeCompleteds_xml
              }
            }
          description: Work with lastGradeCompleteds for a particular enrollment.
          get:
            description: Fetches all the lastGradeCompleted ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "LastGradeCompleted_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: lastGradeCompleted_ids_json
          post:
            description: Adds an lastGradeCompleted for a given enrollment. 
          put:
            description: Bulk update of lastGradeCompletedes for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's lastGradeCompletedes.
          /{last_grade_completed_id}:
            type:
              member:
                schema_json:  lastGradeCompleted_json
                schema_xml:  lastGradeCompleted_xml
            description: Work with a specific lastGradeCompleted for a particular enrollment.
            uriParameters:
              last_grade_completed_id:
                displayName: lastGradeCompleted Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific lastGradeCompleted for a given enrollment.
            put:
              description: Updates one specific lastGradeCompleted for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "LastGradeCompletedID":"12eiuyhtfdrgb564389023retwdsvx22",
                       "LastGradeCompleted":"6",
                       "dataCollectionStage":"4",
                       "informationDate":"2014-04-20T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:LastGradeCompleted hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>   <hmis:LastGradeCompletedID>12eiuyhtfdrgb564389023retwdsvx22</hmis:LastGradeCompletedID>
                       <hmis:LastGradeCompleted>6</hmis:LastGradeCompleted>
                       <hmis:dataCollectionStage>4</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-20T18:25:43.511Z</hmis:informationDate>
                      </hmis:LastGradeCompleted>
            delete:
              description: Deletes one specific lastGradeCompleted for a specific enrollment
        /last_permanent_addresses:
          type: {
            collection: {
                id_schema_json: lastPermanentAddress_id_json,  
                schema_json:  lastPermanentAddress_json,
                schema_xml:  lastPermanentAddress_xml,
                schema_array_json: lastPermanentAddresses_json,
                schema_array_xml: lastPermanentAddresses_xml
              }
            }
          description: Work with lastPermanentAddresses for a particular enrollment.
          get:
            description: Fetches all the lastPermanentAddress ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "last_permanent_address_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: lastPermanentAddress_ids_json
          post:
            description: Adds an lastPermanentAddress for a given enrollment. 
          put:
            description: Bulk update of lastPermanentAddresses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's lastPermanentAddresses.
          /{last_permanent_address_id}:
            type:
              member:
                schema_json:  lastPermanentAddress_json
                schema_xml:  lastPermanentAddress_xml
            description: Work with a specific lastPermanentAddress for a particular enrollment.
            uriParameters:
              last_permanent_address_id:
                displayName: lastPermanentAddress Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific lastPermanentAddress for a given enrollment.
            put:
              description: Updates one specific lastPermanentAddress for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                       "LastPermanentAddressID":"12eiuyhtfdrgb564389023retwdsvxfr",
                       "LastPermanentStreet":"1008 Fairwood ln",
                       "LastPermanentCity":"Douglas",
                       "LastPermanentState":"GA",
                       "LastPermanentZIP":"30105",
                       "AddressDataQuality":"1",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:LastPermanentAddress hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID> <hmis:LastPermanentAddressID>12eiuyhtfdrgb564389023retwdsvxfr</hmis:LastPermanentAddressID>
                       <hmis:LastPermanentStreet>1008 Fairwood ln</hmis:LastPermanentStreet>
                       <hmis:LastPermanentCity>Douglas</hmis:LastPermanentCity>
                       <hmis:LastPermanentState>GA</hmis:LastPermanentState>
                       <hmis:LastPermanentZIP>30105</hmis:LastPermanentZIP>
                       <hmis:AddressDataQuality>1</hmis:AddressDataQuality>
                      </hmis:LastPermanentAddress>
            delete:
              description: Deletes one specific lastPermanentAddress for a specific enrollment
        /medical_assistances:
          type: {
            collection: {
                id_schema_json: medicalAssistance_id_json,  
                schema_json:  medicalAssistance_json,
                schema_xml:  medicalAssistance_xml,
                schema_array_json: medicalAssistances_json,
                schema_array_xml: medicalAssistances_xml
              }
            }
          description: Work with medicalAssistances for a particular enrollment.
          get:
            description: Fetches all the medicalAssistance ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "medicalAssistance_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: medicalAssistance_ids_json
          post:
            description: Adds an medicalAssistance for a given enrollment. 
          put:
            description: Bulk update of medicalAssistances for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's medicalAssistances.
          /{medical_assistance_id}:
            type:
              member:
                schema_json:  medicalAssistance_json
                schema_xml:  medicalAssistance_xml
            description: Work with a specific medicalAssistance for a particular enrollment.
            uriParameters:
              medical_assistance_id:
                displayName: medicalAssistance Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific medicalAssistance for a given enrollment.
            put:
              description: Updates one specific medicalAssistance for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "MedicalAssistanceID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "HIVAIDSAssistance":"1",
                       "NoHIVAIDSAssistanceReason":"0",
                       "ADAP":"3",
                       "NoADAPReason":"3",
                       "dataCollectionStage":"5",
                       "informationDate":"2014-04-27T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:MedicalAssistance hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID> <hmis:MedicalAssistanceID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:MedicalAssistanceID>
                       <hmis:HIVAIDSAssistance>1</hmis:HIVAIDSAssistance>
                       <hmis:NoHIVAIDSAssistanceReason>0</hmis:NoHIVAIDSAssistanceReason>
                       <hmis:ADAP>3</hmis:ADAP>
                       <hmis:NoADAPReason>3</hmis:NoADAPReason>
                       <hmis:dataCollectionStage>5</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-27T18:25:43.511Z</hmis:informationDate>
                      </hmis:MedicalAssistance>
            delete:
              description: Deletes one specific medicalAssistance for a specific enrollment
        /noncash_benefits:
          type: {
            collection: {
                id_schema_json: nonCashBenefit_id_json,  
                schema_json:  nonCashBenefit_json,
                schema_xml:  nonCashBenefit_xml,
                schema_array_json: nonCashBenefits_json,
                schema_array_xml: nonCashBenefits_xml
              }
            }
          description: Work with noncashBenefits for a particular enrollment.
          get:
            description: Fetches all the nonCashBenefit ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "nonCashBenefit_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: nonCashBenefit_ids_json
          post:
            description: Adds an nonCashBenefit for a given enrollment. 
          put:
            description: Bulk update of nonCashBenefits for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's nonCashBenefits.
          /{noncash_benefit_id}:
            type:
              member:
                schema_json:  nonCashBenefit_json
                schema_xml:  nonCashBenefit_xml
            description: Work with a specific nonCashBenefit for a particular enrollment.
            uriParameters:
              noncash_benefit_id:
                displayName: nonCashBenefit Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific nonCashBenefit for a given enrollment.
            put:
              description: Updates one specific nonCashBenefit for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "NonCashBenefitsID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "BenefitsFromAnySource":"5",
                       "SNAP":"1",
                       "WIC":"1",
                       "TANFChildCare":"1",
                       "TANFTransportation":"1",
                       "OtherTANF":"0",
                       "RentalAssistanceOngoing":"1",
                       "RentalAssistanceTemp":"0",
                       "OtherSource":"2",
                       "OtherSourceIdentify":"none",
                       "dataCollectionStage":"5",
                       "informationDate":"2014-04-27T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:NonCashBenefit hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                       <hmis:NonCashBenefitsID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:NonCashBenefitsID>
                       <hmis:BenefitsFromAnySource>5</hmis:BenefitsFromAnySource>
                       <hmis:SNAP>1</hmis:SNAP>
                       <hmis:WIC>1</hmis:WIC>
                       <hmis:TANFChildCare>1</hmis:TANFChildCare>
                       <hmis:TANFTransportation>1</hmis:TANFTransportation>
                       <hmis:OtherTANF>0</hmis:OtherTANF>
                       <hmis:RentalAssistanceOngoing>1</hmis:RentalAssistanceOngoing>
                       <hmis:RentalAssistanceTemp>0</hmis:RentalAssistanceTemp>
                       <hmis:OtherSource>2</hmis:OtherSource>
                       <hmis:OtherSourceIdentify>none</hmis:OtherSourceIdentify>
                       <hmis:dataCollectionStage>5</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-27T18:25:43.511Z</hmis:informationDate>
                      </hmis:NoncashBenefit>
            delete:
              description: Deletes one specific noncashBenefit for a specific enrollment
        /referral_sources:
          type: {
            collection: {
                id_schema_json: referralSource_id_json,  
                schema_json:  referralSources_json,
                schema_xml:  referralSources_xml,
                schema_array_json: referralSources_json,
                schema_array_xml: referralSources_xml
              }
            }
          description: Work with referralSources for a particular enrollment.
          get:
            description: Fetches all the referralSources ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "referralSources_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: referralSources_ids_json
          post:
            description: Adds a referralSources for a given enrollment. 
          put:
            description: Bulk update of referralSources for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's referralSources.
          /{referral_sources_id}:
            type:
              member:
                schema_json:  referralSources_json
                schema_xml:  referralSources_xml
            description: Work with a specific referralSources for a particular enrollment.
            uriParameters:
              referral_sources_id:
                displayName: referralSources Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific referralSources for a given enrollment.
            put:
              description: Updates one specific referralSources for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "ReferralSourceID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "ReferralSource":"1",
                       "CountOutreachReferralApproaches":"5",
                       "dataCollectionStage":"5",
                       "informationDate":"2014-04-27T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:ReferralSources hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                        <hmis:ReferralSourceID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:ReferralSourceID>
                       <hmis:ReferralSource>1</hmis:ReferralSource>
                       <hmis:CountOutreachReferralApproaches>5</hmis:CountOutreachReferralApproaches>
                       <hmis:dataCollectionStage>5</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-27T18:25:43.511Z</hmis:informationDate>
                      </hmis:ReferralSources>
            delete:
              description: Deletes one specific referralSources for a specific enrollment          
        /residential_move_ins:
          type: {
            collection: {
                id_schema_json: residentialMoveIn_id_json,  
                schema_json:  residentialMoveIn_json,
                schema_xml:  residentialMoveIn_xml,
                schema_array_json: residentialMoveIns_json,
                schema_array_xml: residentialMoveIns_xml
              }
            }
          description: Work with residentialMoveIins for a particular enrollment.
          get:
            description: Fetches all the residentialMoveIn ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "residentialMoveIn_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: residentialMoveIn_ids_json
          post:
            description: Adds an residentialMoveIin for a given enrollment. 
          put:
            description: Bulk update of residentialMoveIns for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's residentialMoveIns.
          /{residential_move_in_id}:
            type:
              member:
                schema_json:  residentialMoveIn_json
                schema_xml:  residentialMoveIn_xml
            description: Work with a specific residentialMoveIn for a particular enrollment.
            uriParameters:
              residential_move_in_id:
                displayName: residentialMoveIn Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific residentialMoveIn for a given enrollment.
            put:
              description: Updates one specific residentialMoveIn for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "ResidentialMoveInDateID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "InPermanentHousing":"0",
                       "ResidentialMoveInDate":"2014-04-20T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:ResidentialMoveInDate hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID> <hmis:ResidentialMoveInDateID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:ResidentialMoveInDateID>
                       <hmis:InPermanentHousing>0</hmis:InPermanentHousing>
                       <hmis:ResidentialMoveInDate>2014-04-20T18:25:43.511Z</hmis:ResidentialMoveInDate>
                      </hmis:ResidentialMoveInDate>
            delete:
              description: Deletes one specific residentialMoveIn for a specific enrollment
        /rhybcp_statuses:
          type: {
            collection: {
                id_schema_json: rhybcpStatus_id_json,  
                schema_json:  rhybcpStatus_json,
                schema_xml:  rhybcpStatus_xml,
                schema_array_json: rhybcpStatuses_json,
                schema_array_xml: rhybcpStatuses_xml
              }
            }
          description: Work with rhybcpStatuses for a particular enrollment.
          get:
            description: Fetches all the rhybcpStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "rhybcpStatus_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: rhybcpStatus_ids_json
          post:
            description: Adds an rhybcpStatus for a given enrollment. 
          put:
            description: Bulk update of rhybcpStatuses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's rhybcpStatuses.
          /{rhybcp_status_id}:
            type:
              member:
                schema_json:  rhybcpStatus_json
                schema_xml:  rhybcpStatus_xml
            description: Work with a specific rhybcpStatus for a particular enrollment.
            uriParameters:
              rhybcp_status_id:
                displayName: rhybcp_status Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific rhybcpStatus for a given enrollment.
            put:
              description: Updates one specific rhybcpStatus for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "RHYBCPStatusID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "StatusDate":"2014-04-27T18:25:43.511Z",
                       "FYSBYouth":"3",
                       "ReasonNoServices":"6",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:RhybcpStatus hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:RHYBCPStatusID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:RHYBCPStatusID>
                       <hmis:StatusDate>2014-04-27T18:25:43.511Z</hmis:StatusDate>
                       <hmis:FYSBYouth>3</hmis:FYSBYouth>
                       <hmis:ReasonNoServices>6</hmis:ReasonNoServices>
                      </hmis:RhybcpStatus>
            delete:
              description: Deletes one specific rhybcpStatus for a specific enrollment
        /path_statuses:
          type: {
            collection: {
                id_schema_json: pathStatus_id_json,  
                schema_json:  pathStatus_json,
                schema_xml:  pathStatus_xml,
                schema_array_json: pathStatuses_json,
                schema_array_xml: pathStatuses_xml
              }
            }
          description: Work with pathStatuses for a particular enrollment.
          get:
            description: Fetches all the pathStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "pathStatus_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: path_status_ids_json
          post:
            description: Adds an pathStatus for a given enrollment. 
          put:
            description: Bulk update of pathStatuses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's pathStatuses.
          /{path_status_id}:
            type:
              member:
                schema_json:  pathStatus_json
                schema_xml:  pathStatus_xml
            description: Work with a specific pathStatus for a particular enrollment.
            uriParameters:
              path_status_id:
                displayName: pathStatus Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific pathStatus for a given enrollment.
            put:
              description: Updates one specific pathStatus for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "PathStatusID":"eiuy45fdrgb564389023retwdsvxfrteud",
                       "DateOfStatus":"2014-04-27T18:25:43.511Z",
                       "ClientEnrolledInPATH":"2",
                       "ReasonNotEnrolled":"4",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:PathStatus hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                       <hmis:PathStatusID>eiuy45fdrgb564389023retwdsvxfrteud</hmis:PathStatusID>
                       <hmis:DateOfStatus>2014-04-27T18:25:43.511Z</hmis:DateOfStatus>
                       <hmis:ClientEnrolledInPATH>2</hmis:ClientEnrolledInPATH>
                       <hmis:ReasonNotEnrolled>4</hmis:ReasonNotEnrolled>
                      </hmis:PathStatus>
            delete:
              description: Deletes one specific path_status for a specific enrollment
        /percent_amis:
          type: {
            collection: {
                id_schema_json: percentAmi_id_json,  
                schema_json:  percentAmi_json,
                schema_xml:  percentAmi_xml,
                schema_array_json: percentAmis_json,
                schema_array_xml: percentAmis_xml
              }
            }
          description: Work with percent_amis for a particular enrollment.
          get:
            description: Fetches all the percentAmi ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "percentAmi_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: percent_ami_ids_json
          post:
            description: Adds an percentAmi for a given enrollment. 
          put:
            description: Bulk update of percentAmis for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's percentAmis.
          /{percent_ami_id}:
            type:
              member:
                schema_json:  percentAmi_json
                schema_xml:  percentAmi_xml
            description: Work with a specific percentAmi for a particular enrollment.
            uriParameters:
              percent_ami_id:
                displayName: percentAmi Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific percentAmi for a given enrollment.
            put:
              description: Updates one specific percentAmi for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "PercentAMIID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "PercentAMI":"2",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:PercentAmi hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:PercentAMIID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:PercentAMIID>
                       <hmis:PercentAMI>2</hmis:PercentAMI>
                      </hmis:PercentAmi>
            delete:
              description: Deletes one specific percentAmi for a specific enrollment
        /school_statuses:
          type: {
            collection: {
                id_schema_json: schoolStatus_id_json,  
                schema_json:  schoolStatus_json,
                schema_xml:  schoolStatus_xml,
                schema_array_json: schoolStatuses_json,
                schema_array_xml: schoolStatuses_xml
              }
            }
          description: Work with schoolStatuses for a particular enrollment.
          get:
            description: Fetches all the schoolStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "schoolStatus_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: schoolStatus_ids_json
          post:
            description: Adds an schoolStatus for a given enrollment. 
          put:
            description: Bulk update of schoolStatuses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's schoolStatuses.
          /{school_status_id}:
            type:
              member:
                schema_json:  schoolStatus_json
                schema_xml:  schoolStatus_xml
            description: Work with a specific schoolStatus for a particular enrollment.
            uriParameters:
              school_status_id:
                displayName: schoolStatus Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific schoolStatus for a given enrollment.
            put:
              description: Updates one specific schoolStatus for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "SchoolStatusID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "SchoolStatus":"8",
                       "dataCollectionStage":"5",
                       "informationDate":"2014-04-27T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:SchoolStatus hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                      <hmis:SchoolStatusID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:SchoolStatusID>
                       <hmis:SchoolStatus>8</hmis:SchoolStatus>
                       <hmis:dataCollectionStage>5</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-27T18:25:43.511Z</hmis:informationDate>
                      </hmis:SchoolStatus>
            delete:
              description: Deletes one specific schoolStatus for a specific enrollment
        /services:
          type: {
            collection: {
                id_schema_json: service_id_json,  
                schema_json:  service_json,
                schema_xml:  service_xml,
                schema_array_json: services_json,
                schema_array_xml: services_xml
              }
            }
          description: Work with services for a particular enrollment.
          get:
            description: Fetches all the service ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "service_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: service_ids_json
          post:
            description: Adds an service for a given enrollment. 
          put:
            description: Bulk update of services for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's services.
          /{service_id}:
            type:
              member:
                schema_json:  service_json
                schema_xml:  service_xml
            description: Work with a specific service for a particular enrollment.
            uriParameters:
              service_id:
                displayName: service Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific service for a given enrollment.
            put:
              description: Updates one specific service for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "ServicesID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "DateProvided":"2014-09-20T18:25:43.511Z",
                       "RecordType":"3",
                       "TypeProvided":"5",
                       "OtherTypeProvided":"Transportation",
                       "SubTypeProvided":"4",
                       "FAAmount":"750",
                       "ReferralOutcome":"4"
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:Service hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                       <hmis:ServicesID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:ServicesID>
                       <hmis:DateProvided>2014-09-20T18:25:43.511Z</hmis:DateProvided>
                       <hmis:RecordType>3</hmis:RecordType>
                       <hmis:TypeProvided>5</hmis:TypeProvided>
                       <hmis:OtherTypeProvided>Transportation</hmis:OtherTypeProvided>
                       <hmis:SubTypeProvided>4</hmis:SubTypeProvided>
                       <hmis:FAAmount>750</hmis:FAAmount>
                       <hmis:ReferralOutcome>4</hmis:ReferralOutcome>
                      </hmis:Service>
            delete:
              description: Deletes one specific service for a specific enrollment
        /sexual_orientations:
          type: {
            collection: {
                id_schema_json: sexualOrientation_id_json,  
                schema_json:  sexualOrientation_json,
                schema_xml:  sexualOrientation_xml,
                schema_array_json: sexualOrientations_json,
                schema_array_xml: sexualOrientations_xml
              }
            }
          description: Work with sexualOrientations for a particular enrollment.
          get:
            description: Fetches all the sexualOrientation ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "sexualOrientation_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: sexualOrientation_ids_json
          post:
            description: Adds an sexualOrientation for a given enrollment. 
          put:
            description: Bulk update of sexualOrientations for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's sexualOrientations.
          /{sexual_orientation_id}:
            type:
              member:
                schema_json:  sexualOrientation_json
                schema_xml:  sexualOrientation_xml
            description: Work with a specific sexualOrientation for a particular enrollment.
            uriParameters:
              sexual_orientation_id:
                displayName: sexualOrientation Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific sexualOrientation for a given enrollment.
            put:
              description: Updates one specific sexualOrientation for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "SexualOrientationID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "SexualOrientation":"4",
                       "dataCollectionStage":"5",
                       "informationDate":"2014-04-27T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:SexualOrientation hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID> <hmis:SexualOrientationID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:SexualOrientationID>
                       <hmis:SexualOrientation>4</hmis:SexualOrientation>
                       <hmis:dataCollectionStage>5</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-27T18:25:43.511Z</hmis:informationDate>
                      </hmis:SexualOrientation>
            delete:
              description: Deletes one specific sexualOrientation for a specific enrollment
        /worst_housing_situations:
          type: {
            collection: {
                id_schema_json: worstHousingSituation_id_json,  
                schema_json:  worstHousingSituation_json,
                schema_xml:  worstHousingSituation_xml,
                schema_array_json: worstHousingSituations_json,
                schema_array_xml: worstHousingSituations_xml
              }
            }
          description: Work with worstHousingSituations for a particular enrollment.
          get:
            description: Fetches all the worstHousingSituation ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "worstHousingSituation_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: worstHousingSituation_ids_json
          post:
            description: Adds an worstHousingSituation for a given enrollment. 
          put:
            description: Bulk update of worstHousingSsituations for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's worstHousingSituations.
          /{worst_housing_situation_id}:
            type:
              member:
                schema_json:  worstHousingSituation_json
                schema_xml:  worstHousingSituation_xml
            description: Work with a specific worstHousingSituation for a particular enrollment.
            uriParameters:
              worst_housing_situation_id:
                displayName: worstHousingSituation Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific worstHousingSituation for a given enrollment.
            put:
              description: Updates one specific worstHousingSituation for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "WorstHousingSituationID":"12eiuyhtfdrgb564389023retwdsvxfr",
                       "WorstHousingSituation":"2",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:WorstHousingSituation hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID> <hmis:WorstHousingSituationID>12eiuyhtfdrgb564389023retwdsvxfr</hmis:WorstHousingSituationID>
                       <hmis:WorstHousingSituation>2</hmis:WorstHousingSituation>
                      </hmis:WorstHousingSituation>
            delete:
              description: Deletes one specific worstHousingSituation for a specific enrollment
        /youth_critical_issues:
          type: {
            collection: {
                id_schema_json: youthCriticalIssues_id_json,  
                schema_json:  youthCriticalIssues_json,
                schema_xml:  youthCriticalIssues_xml,
                schema_array_json: youthCriticalIssueses_json,
                schema_array_xml: youthCriticalIssueses_xml
              }
            }
          description: Work with youthCriticalIssueses for a particular enrollment.
          get:
            description: Fetches all the youthCriticalIssues ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:  
                  application/json:
                    example: |
                      "youthCriticalIissues_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                    schema: youthCriticalIssues_ids_json
          post:
            description: Adds an youthCriticalIssues for a given enrollment. 
          put:
            description: Bulk update of youthCriticalIssueses for a given enrollment
          delete:
            description: Bulk deletion of a enrollment's youthCriticalIssueses.
          /{youth_critical_issues_id}:
            type:
              member:
                schema_json:  youthCriticalIssues_json
                schema_xml:  youthCriticalIssues_xml
            description: Work with a specific youthCriticalIssues for a particular enrollment.
            uriParameters:
              youth_critical_issues_id:
                displayName: youthCriticalIssues Identifier 
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific youthCriticalIssues for a given enrollment.
            put:
              description: Updates one specific youthCriticalIssues for a specific enrollment.
              body:
                application/json:
                  example: |
                    {
                      "ProjectEntryID" : "12345678901234567890123456789012",
                      "YouthCriticalIssuesID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "HouseholdDynamics":"4",
                       "SexualOrientationGenderIDYouth":"2",
                       "SexualOrientationGenderIDFam":"2",
                       "HousingIssuesYouth":"1",
                       "HousingIssuesFam":"2",
                       "SchoolEducationalIssuesYouth":"2",
                       "SchoolEducationalIssuesFam":"1",
                       "UnemploymentYouth":"0",
                       "UnemploymentFam":"2",
                       "MentalHealthIssuesYouth":"1",
                       "MentalHealthIssuesFam":"2",
                       "HealthIssuesYouth":"0",
                       "HealthIssuesFam":"3",
                       "PhysicalDisabilityYouth":"0",
                       "PhysicalDisabilityFam":"1",
                       "MentalDisabilityYouth":"0",
                       "MentalDisabilityFam":"0",
                       "AbuseAndNeglectYouth":"5",
                       "AbuseAndNeglectFam":"2",
                       "AlcoholDrugAbuseYouth":"0",
                       "AlcoholDrugAbuseFam":"4",
                       "InsufficientIncome":"5",
                       "ActiveMilitaryParent":"1",
                       "IncarceratedParent":"3",
                       "IncarceratedParentStatus":"0",
                       "dataCollectionStage":"5",
                       "informationDate":"2014-04-27T18:25:43.511Z",
                      "DateCreated" : "2012-04-23T18:25:43.511Z",
                      "DateUpdated" : "2013-04-23T18:25:43.511Z",
                      "UserID": "77123456789012345678901234567890"
                    }
                application/xml:
                  example: |
                      <hmis:YouthCriticalIssues hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                      <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID> <hmis:YouthCriticalIssuesID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:YouthCriticalIssuesID>
                       <hmis:HouseholdDynamics>4</hmis:HouseholdDynamics>
                       <hmis:SexualOrientationGenderIDYouth>2</hmis:SexualOrientationGenderIDYouth>
                       <hmis:SexualOrientationGenderIDFam>2</hmis:SexualOrientationGenderIDFam>
                       <hmis:HousingIssuesYouth>1</hmis:HousingIssuesYouth>
                       <hmis:HousingIssuesFam>2</hmis:HousingIssuesFam>
                       <hmis:SchoolEducationalIssuesYouth>2</hmis:SchoolEducationalIssuesYouth>
                       <hmis:SchoolEducationalIssuesFam>1</hmis:SchoolEducationalIssuesFam>
                       <hmis:UnemploymentYouth>0</hmis:UnemploymentYouth>
                       <hmis:UnemploymentFam>2</hmis:UnemploymentFam>
                       <hmis:MentalHealthIssuesYouth>1</hmis:MentalHealthIssuesYouth>
                       <hmis:MentalHealthIssuesFam>2</hmis:MentalHealthIssuesFam>
                       <hmis:HealthIssuesYouth>0</hmis:HealthIssuesYouth>
                       <hmis:HealthIssuesFam>3</hmis:HealthIssuesFam>
                       <hmis:PhysicalDisabilityYouth>0</hmis:PhysicalDisabilityYouth>
                       <hmis:PhysicalDisabilityFam>1</hmis:PhysicalDisabilityFam>
                       <hmis:MentalDisabilityYouth>0</hmis:MentalDisabilityYouth>
                       <hmis:MentalDisabilityFam>0</hmis:MentalDisabilityFam>
                       <hmis:AbuseAndNeglectYouth>5</hmis:AbuseAndNeglectYouth>
                       <hmis:AbuseAndNeglectFam>2</hmis:AbuseAndNeglectFam>
                       <hmis:AlcoholDrugAbuseYouth>0</hmis:AlcoholDrugAbuseYouth>
                       <hmis:AlcoholDrugAbuseFam>4</hmis:AlcoholDrugAbuseFam>
                       <hmis:InsufficientIncome>5</hmis:InsufficientIncome>
                       <hmis:ActiveMilitaryParent>1</hmis:ActiveMilitaryParent>
                       <hmis:IncarceratedParent>3</hmis:IncarceratedParent>
                       <hmis:IncarceratedParentStatus>0</hmis:IncarceratedParentStatus>
                       <hmis:dataCollectionStage>5</hmis:dataCollectionStage>
                       <hmis:informationDate>2014-04-27T18:25:43.511Z</hmis:informationDate>
                      </hmis:YouthCriticalIssues>
            delete:
              description: Deletes one specific youthCriticalIssues for a specific enrollment
    /veteran_infos:
      type: {
        collection: {
            id_schema_json: veteranInfo_id_json,  
            schema_json:  veteranInfo_json,
            schema_xml:  veteranInfo_xml,
            schema_array_json: veteranInfos_json,
            schema_array_xml: veteranInfosxml
        }
      }
      description: Work with veteranInfos for a particular client.
      get:
        description: Fetches all the veteranInfo ids for a given client, or a subset of them, if a query parameter is used.
        #securedBy: [oauth_2_0: { scopes: [ user ] } ]
        queryParameters:
        responses:
          200:
            body:  
              application/json:
                example: |
                  "veteranInfo_ids":[{"PersonalID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"PersonalID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                schema: veteranInfo_ids_json
      post:
        description: Adds an veteranInfo for a given client. 
      put:
        description: Bulk update of veteranInfos for a given client
      delete:
        description: Bulk deletion of a client's veteranInfos.
      /{veteran_info_id}:
        type:
          member:
            schema_json:  veteranInfo_json
            schema_xml:  veteranInfo_xml
        description: Work with a specific veteranInfo for a particular client.
        uriParameters:
          veteran_info_id:
            displayName: VeteranInfo Identifier 
            type: string
            example: ADBC1111211111114111111111D1111V
        get:
          description: Fetches one specific veteranInfo for a given client.
        put:
          description: Updates one specific veteranInfo for a specific client.
          body:
            application/json:
              example: |
                {
                  "ProjectEntryID" : "12345678901234567890123456789012",
                  "PersonalID" : "ADBC1111211111114111111111D1111V",
                  "ProjectID" : "99123456789012345678901234567890"
                  "VeteranInfoID":"eiuyhtfdrgb564389023retwdsvxfrteud",
                       "YearEnteredService":"2000",
                       "YearSeparated":"2010",
                       "WorldWarII":"0",
                       "KoreanWar":"0",
                       "VietnamWa":"0r",
                       "DesertStorm":"0",
                       "AfghanistanOEF":"0",
                       "IraqOIF":"1",
                       "IraqOND":"1",
                       "OtherTheater":"2",
                       "MilitaryBranch":"4",
                       "DischargeStatus":"honorable",
                  "DateCreated" : "2012-04-23T18:25:43.511Z",
                  "DateUpdated" : "2013-04-23T18:25:43.511Z",
                  "UserID": "77123456789012345678901234567890"
                }
            application/xml:
              example: |
                <hmis:Veteran_info hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                  <hmis:PersonalID>A1a1</hmis:PersonalID>
                        <hmis:VeteranInfoID>eiuyhtfdrgb564389023retwdsvxfrteud</hmis:VeteranInfoID>
                       <hmis:YearEnteredService>2000</hmis:YearEnteredService>
                       <hmis:YearSeparated>2010</hmis:YearSeparated>
                       <hmis:WorldWarII>0</hmis:WorldWarII>
                       <hmis:KoreanWar>0</hmis:KoreanWar>
                       <hmis:VietnamWa>0r</hmis:VietnamWa>
                       <hmis:DesertStorm>0</hmis:DesertStorm>
                       <hmis:AfghanistanOEF>0</hmis:AfghanistanOEF>
                       <hmis:IraqOIF>1</hmis:IraqOIF>
                       <hmis:IraqOND>1</hmis:IraqOND>
                       <hmis:OtherTheater>2</hmis:OtherTheater>
                       <hmis:MilitaryBranch>4</hmis:MilitaryBranch>
                       <hmis:DischargeStatus>honorable</hmis:DischargeStatus>
                </hmis:Veteran_info>
        delete:
          description: Deletes one specific veteranInfo for a specific client.    
/enrollments:
  type: {
    collection: {
        id_schema_json: enrollment_id_json,  
        schema_json:  enrollment_json,
        schema_xml:  enrollment_xml,
        schema_array_json: enrollments_json,
        schema_array_xml: enrollments_xml
    }
  }
  get:
    #securedBy: [oauth_2_0: { scopes: [ user ] } ]
    queryParameters:
    responses:
      200:
        body:  
          application/json:
            example: |
              "enrollment_ids":[{"ProjectEntryID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectEntryID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
            schema: enrollment_ids_json
  put:
    body:
      application/json:
        example: |
          {
            "ProjectEntryID" : "12345678901234567890123456789012",
            "PersonalID" : "ADBC1111211111114111111111D1111V",
            "ProjectID" : "99123456789012345678901234567890"
            "EntryDate" : "10-12-2014",
            "HouseholdID" : "77123456789012345678901234567890",
            "ResidencePrior" : "3",
            "DateCreated" : "2012-04-23T18:25:43.511Z",
            "DateUpdated" : "2013-04-23T18:25:43.511Z",
            "UserID": "77123456789012345678901234567890"
          }
      application/xml:
        example: |
          <hmis:Enrollment hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
            <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
            <hmis:PersonalID>A1a1</hmis:PersonalID>
            <hmis:ProjectID>222D</hmis:ProjectID>
            <hmis:EntryDate>2016-04-12Z</hmis:EntryDate>
            <hmis:HouseholdID>a34563w</hmis:HouseholdID>
            <hmis:RelationshipToHoH>1</hmis:RelationshipToHoH>
            <hmis:ResidencePrior>12</hmis:ResidencePrior>
            <hmis:OtherResidencePrior>some other residence text here</hmis:OtherResidencePrior>
            <hmis:ResidencePriorLengthOfStay>8</hmis:ResidencePriorLengthOfStay>
            <hmis:ContinuouslyHomelessOneYear>8</hmis:ContinuouslyHomelessOneYear>
            <hmis:TimesHomelessPastThreeYears>0</hmis:TimesHomelessPastThreeYears>
            <hmis:MonthsHomelessPastThreeYears>103</hmis:MonthsHomelessPastThreeYears>
            <hmis:MonthsHomelessThisTime>101</hmis:MonthsHomelessThisTime>
            <hmis:YearsHomeless>3</hmis:YearsHomeless>
            <hmis:StatusDocumented>1</hmis:StatusDocumented>
            <hmis:DisablingCondition>9</hmis:DisablingCondition>
            <hmis:HousingStatus>6</hmis:HousingStatus>
          </hmis:Enrollment>
  post:
    body:
      application/json:
        example: |
          {
            "ProjectEntryID" : "12345678901234567890123456789012",
            "PersonalID" : "ADBC1111211111114111111111D1111V",
            "ProjectID" : "99123456789012345678901234567890"
            "EntryDate" : "10-12-2014",
            "HouseholdID" : "77123456789012345678901234567890",
            "ResidencePrior" : "3",
            "DateCreated" : "2012-04-23T18:25:43.511Z",
            "DateUpdated" : "2013-04-23T18:25:43.511Z",
            "UserID": "77123456789012345678901234567890"
          }
        schema: enrollment_json
      application/xml:
        example: |
          <hmis:Enrollment hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
            <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
            <hmis:PersonalID>A1a1</hmis:PersonalID>
            <hmis:ProjectID>222D</hmis:ProjectID>
            <hmis:EntryDate>2016-04-12Z</hmis:EntryDate>
            <hmis:HouseholdID>a34563w</hmis:HouseholdID>
            <hmis:RelationshipToHoH>1</hmis:RelationshipToHoH>
            <hmis:ResidencePrior>12</hmis:ResidencePrior>
            <hmis:OtherResidencePrior>some other residence text here</hmis:OtherResidencePrior>
            <hmis:ResidencePriorLengthOfStay>8</hmis:ResidencePriorLengthOfStay>
            <hmis:ContinuouslyHomelessOneYear>8</hmis:ContinuouslyHomelessOneYear>
            <hmis:TimesHomelessPastThreeYears>0</hmis:TimesHomelessPastThreeYears>
            <hmis:MonthsHomelessPastThreeYears>103</hmis:MonthsHomelessPastThreeYears>
            <hmis:MonthsHomelessThisTime>101</hmis:MonthsHomelessThisTime>
            <hmis:YearsHomeless>3</hmis:YearsHomeless>
            <hmis:StatusDocumented>1</hmis:StatusDocumented>
            <hmis:DisablingCondition>9</hmis:DisablingCondition>
            <hmis:HousingStatus>6</hmis:HousingStatus>
          </hmis:Enrollment>
        schema: enrollment_xml
    responses:
      201:
        body:
          application/json:
            example: |
              {"ProjectEntryID":"csssssaassasfdfreswssaaasdffrfre"}
  /{id}:
    uriParameters:
      id:
        displayName: Enrollment Identifier 
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  enrollment_json
        schema_xml:  enrollment_xml
    get:
      responses:
        200:
          body:  
            application/json:
              example: |
                {
                  "ProjectEntryID" : "12345678901234567890123456789012",
                  "PersonalID" : "ADBC1111211111114111111111D1111V",
                  "ProjectID" : "99123456789012345678901234567890"
                  "EntryDate" : "10-12-2014",
                  "HouseholdID" : "77123456789012345678901234567890",
                  "ResidencePrior" : "3",
                  "DateCreated" : "2012-04-23T18:25:43.511Z",
                  "DateUpdated" : "2013-04-23T18:25:43.511Z",
                  "UserID": "77123456789012345678901234567890"
                }
            application/xml:
              example: |
                <hmis:Enrollment hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                  <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                  <hmis:PersonalID>A1a1</hmis:PersonalID>
                  <hmis:ProjectID>222D</hmis:ProjectID>
                  <hmis:EntryDate>2016-04-12Z</hmis:EntryDate>
                  <hmis:HouseholdID>a34563w</hmis:HouseholdID>
                  <hmis:RelationshipToHoH>1</hmis:RelationshipToHoH>
                  <hmis:ResidencePrior>12</hmis:ResidencePrior>
                  <hmis:OtherResidencePrior>some other residence text here</hmis:OtherResidencePrior>
                  <hmis:ResidencePriorLengthOfStay>8</hmis:ResidencePriorLengthOfStay>
                  <hmis:ContinuouslyHomelessOneYear>8</hmis:ContinuouslyHomelessOneYear>
                  <hmis:TimesHomelessPastThreeYears>0</hmis:TimesHomelessPastThreeYears>
                  <hmis:MonthsHomelessPastThreeYears>103</hmis:MonthsHomelessPastThreeYears>
                  <hmis:MonthsHomelessThisTime>101</hmis:MonthsHomelessThisTime>
                  <hmis:YearsHomeless>3</hmis:YearsHomeless>
                  <hmis:StatusDocumented>1</hmis:StatusDocumented>
                  <hmis:DisablingCondition>9</hmis:DisablingCondition>
                  <hmis:HousingStatus>6</hmis:HousingStatus>
                </hmis:Enrollment>
    put:
      body:
        application/json:
          example: |
            {
              "ProjectEntryID" : "12345678901234567890123456789012",
              "PersonalID" : "ADBC1111211111114111111111D1111V",
              "ProjectID" : "99123456789012345678901234567890"
              "EntryDate" : "10-12-2014",
              "HouseholdID" : "77123456789012345678901234567890",
              "ResidencePrior" : "3",
              "DateCreated" : "2012-04-23T18:25:43.511Z",
              "DateUpdated" : "2013-04-23T18:25:43.511Z",
              "UserID": "77123456789012345678901234567890"
            }
        application/xml:
          example: |
            <hmis:Enrollment hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
              <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
              <hmis:PersonalID>A1a1</hmis:PersonalID>
              <hmis:ProjectID>222D</hmis:ProjectID>
              <hmis:EntryDate>2016-04-12Z</hmis:EntryDate>
              <hmis:HouseholdID>a34563w</hmis:HouseholdID>
              <hmis:RelationshipToHoH>1</hmis:RelationshipToHoH>
              <hmis:ResidencePrior>12</hmis:ResidencePrior>
              <hmis:OtherResidencePrior>some other residence text here</hmis:OtherResidencePrior>
              <hmis:ResidencePriorLengthOfStay>8</hmis:ResidencePriorLengthOfStay>
              <hmis:ContinuouslyHomelessOneYear>8</hmis:ContinuouslyHomelessOneYear>
              <hmis:TimesHomelessPastThreeYears>0</hmis:TimesHomelessPastThreeYears>
              <hmis:MonthsHomelessPastThreeYears>103</hmis:MonthsHomelessPastThreeYears>
              <hmis:MonthsHomelessThisTime>101</hmis:MonthsHomelessThisTime>
              <hmis:YearsHomeless>3</hmis:YearsHomeless>
              <hmis:StatusDocumented>1</hmis:StatusDocumented>
              <hmis:DisablingCondition>9</hmis:DisablingCondition>
              <hmis:HousingStatus>6</hmis:HousingStatus>
            </hmis:Enrollment>
/hmis_csv:
  description: Batch transmission of HUD HMIS CSV 4.0 according to the specifications at "http://www.hudhdx.info/Resources/Vendors/4_0/HMISCSVSpecifications4_0FINAL.pdf", but placed together in a single .zip file without password protection.
  post:
    description: Upload a single zip file containing any/all of the CSV files defined at http://www.hudhdx.info/Resources/Vendors/4_0/HMISCSVSpecifications4_0FINAL.pdf
    body:
      text/csv:
    responses:
      200:
        description: OK.  The received csv will be parsed and merged with the existing data set.  A bulk upload report can be obtained by authorized users. 
      400:
        description: Bad Request – The request was invalid or cannot be served.
      401:
        description: Unauthorized – The request requires user authentication.
      403:
        description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
      422:
        description: Unprocessable Entity - Request body is incorrect.
      500:
        description: 500 – Internal Server Error.
  get:
    description: Download a single zip file containing any/all of the CSV files defined at http://www.hudhdx.info/Resources/Vendors/4_0/HMISCSVSpecifications4_0FINAL.pdf.  The query parameters restrict the download to a subset.
    queryParameters:
      Delta:
      StartDate:
        description: The beginning date for for the exported data
        type: "date"
        example: 10-01-2012
      EndDate:
        type: "date"
        example: 09-30-2013
      #organization id
      #project id
    responses:
      400:
        description: Bad Request – The request was invalid or cannot be served. 
      401:
        description: Unauthorized – The request requires an user authentication.
      403: 
        description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
      404:
        description: Not found – There is no resource behind the URI.
      500: 
        description: Internal Server Error
/hmis_xml:
  description: Batch transmission of HUD HMIS XML 4.0 according to the specifications at http://www.hudhdx.info/Resources/Vendors/4_0/HUD_HMIS.xsd.  An example instance is at http://www.hudhdx.info/Resources/Vendors/4_0/HUD_HMIS_Instance.xml.
  post:
    body:
      text/xml:
        schema: bulk_hmis_xml
    responses:
      200:
        description: OK.  The received csv will be parsed, validated, and merged with the existing data set.  A bulk upload report can be obtained by authorized users.
      400:
        description: Bad Request – The request was invalid or cannot be served.
      401:
        description: Unauthorized – The request requires user authentication.
      403:
        description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
      422:
        description: Unprocessable Entity - Request body is incorrect.
        body:
          application/json:
            example: |
              {message: "validation errors are: line 10 not an integer."}
      500:
        description: 500 – Internal Server Error.
  get:
    queryParameters:
      #date start
      #date end
      #organization id
      #project id
    responses:
        200:
          body:  
            application/xml:
              schema: bulk_hmis_xml
        400:
          description: Bad Request – The request was invalid or cannot be served. 
        401:
          description: Unauthorized – The request requires an user authentication.
        403: 
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500: 
          description: Internal Server Error
/organizations:
  type: {
    collection: {
        id_schema_json: organization_id_json,  
        schema_json:  organization_json,
        schema_xml:  organization_xml,
        schema_array_json: organizations_json,
        schema_array_xml: organizations_xml
      }
    }
  get:
    queryParameters:
      OrganizationName:
        type: "string"
        example: "JSN Services"
      OrganizationCommonName:
        type: "string"
        example: JSN
    responses:
      200:
        body:  
          application/json:
            example: |
              "organization_ids":[{"OrganizationID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"OrganizationID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
            schema: organization_ids_json
  put:
    body:
      application/json:
        example: |
          {"Organizations":[{"OrganizationID":"csssssaassasfdfreswssaaasdffrfre","OrganizationName":"The Name","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"org112"},{"OrganizationID":"abcsteaassasrdyreswssaaasdffrfre","OrganizationName":"The other name","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"org115"}]
          }
      application/xml:
        example: |
          <hmis:Organizations>
          <hmis:Organization hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
          <hmis:OrganizationID>Org1234</hmis:OrganizationID>
          <hmis:OrganizationName>The organization</hmis:OrganizationName>
          <hmis:OrganizationCommonName>ORG</hmis:OrganizationCommonName>
          </hmis:Organization>
          <hmis:Organization hmis:dateCreated="2014-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned102">
          <hmis:OrganizationID>Org2345</hmis:OrganizationID>
          <hmis:OrganizationName>The other organization</hmis:OrganizationName>
          <hmis:OrganizationCommonName>Org2</hmis:OrganizationCommonName>
          </hmis:Organization>
          </hmis:Organizations>
  post:
    body:
      application/json:
        example: |
          {"OrganizationID":"csssssaassasfdfreswssaaasdffrfre","OganizationName":"The org","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"org234"}
        schema: organization_json
      application/xml:
        example: |
          <hmis:Organization hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="org234">
              <hmis:OrganizationID>Org239</hmis:OrganizationID>
              <hmis:OrganizationName>The organization</hmis:OrganizationName>
              <hmis:OrganizationCommonName>ORG</hmis:OrganizationCommonName>
            </hmis:Organization>
        schema: organization_xml
    responses:
      201:
        description: Returns the ID of the newly created organization.
        body:
          application/json:
            schema: organization_id_json
            example: |
              {"OrganizationID":"csssssaassasfdfreswssaaasdffrfre"}
  /{id}:
    uriParameters:
      id:
        displayName: Organization Identifier 
        type: string
        example: ADBC11112AD111114111111111D1111V
    type:
      member:
        schema_json:  organization_json
        schema_xml:  organization_xml
    get:
      responses:
        200:
          body:  
            application/json:
              example: |
                {
                  "OrganizationID":"csssssaassasfdfreswssaaasdffrfre",
                  "OganizationName":"The Org",
                  "DateCreated":"10-12-2014",
                  "DateUpdated":"11-14-2014",
                  "UserID":"org234"
                }
            application/xml:
              example: |
                <hmis:Organization hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="org234">
                <hmis:OrganizationID>Org239</hmis:OrganizationID>
                <hmis:OrganizationName>The organization</hmis:OrganizationName>
                <hmis:OrganizationCommonName>ORG</hmis:OrganizationCommonName>
                </hmis:Organization> 
    put:  
      body:   
        application/json:
           example: |
            {"OrganizationID":"csssssaassasfdfreswssaaasdffrfre","OganizationName":"The org","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"org234"}              
        application/xml:
            example: |
              <hmis:Organization hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="org234">
              <hmis:OrganizationID>Org239</hmis:OrganizationID>
              <hmis:OrganizationName>The organization</hmis:OrganizationName>
              <hmis:OrganizationCommonName>ORG</hmis:OrganizationCommonName>
              </hmis:Organization>
/projects:
  type: {
    collection: {
        id_schema_json: project_id_json,  
        schema_json:  project_json,
        schema_xml:  project_xml,
        schema_array_json: projects_json,
        schema_array_xml: projects_xml
    }
  }
  get:
    queryParameters:
      ProjectName:
        type: "string"
        example: "The Project"
    responses:
      200:
        body:  
          application/json:
            example: |
              "projects_ids":[{"ProjectID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"ProjectID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
            schema: project_ids_json  
  put:
    body:
      application/json:
        example: | 
          {"projects":[{"ProjectID":"csssssaassasfdfreswssaaasdffrfre","OrganizationID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ProjectName":"Project 1","ContinuumProject":"1","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"},       {"ProjectID":"abcsteaassasrdyreswssaaasdffrfre","OrganizationID":"aaaaaaaaaaaaaaaaaaaaaaaaaaabbbba","ProjectName":"Project 2","ContinuumProject":"1","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"psmith"}]
      application/xml:
        example: |
          </hmis:Projects>
          <hmis:Project hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100"> <hmis:ProjectID>aserh2345htgdr6945678094rth34520</hmis:ProjectID>
          <hmis:ProjectName>Project 1</hmis:ProjectName>
          <hmis:ContinuumProject>1</hmis:ContinuumProject>
          <hmis:ProjectType>5</hmis:ProjectType>
          <hmis:ResidentialAffiliation>3</hmis:ResidentialAffiliation>
          <hmis:TrackingMethod>4</hmis:TrackingMethod>
          <hmis:TargetPopulation>2</hmis:TargetPopulation>
          <hmis:ProjectCommonName>P1</hmis:ProjectCommonName>
          </hmis:Project>
          <hmis:Project hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
          <hmis:ProjectID>aserh2345htgdr6945678094rth34520</hmis:ProjectID>
          <hmis:ProjectName>Project 1</hmis:ProjectName>
          <hmis:ContinuumProject>1</hmis:ContinuumProject>
          <hmis:ProjectType>5</hmis:ProjectType>
          <hmis:ResidentialAffiliation>3</hmis:ResidentialAffiliation>
          <hmis:TrackingMethod>4</hmis:TrackingMethod>
          <hmis:TargetPopulation>2</hmis:TargetPopulation>
          <hmis:ProjectCommonName>P1</hmis:ProjectCommonName>
          </hmis:Project>  
          </hmis:Projects>
  post:
    body:
      application/json:
        schema: project_json
          example:|
            {
              "ProjectID":"csssssaassasfdfreswssaaasdffrfre",
              "ProjectName":"Project  One",
              "DateCreated":"10-12-2014",
              "DateUpdated":"11-14-2014",
              "UserID":"gsmith"}
      application/xml:
        schema: project_xml
          example:|
            <hmis:Project hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
            <hmis:ProjectID>aserh2345htgdr6945678094rth34520</hmis:ProjectID>
            <hmis:ProjectName>Project 1</hmis:ProjectName>
            <hmis:ContinuumProject>1</hmis:ContinuumProject>
            <hmis:ProjectType>5</hmis:ProjectType>
            <hmis:ResidentialAffiliation>3</hmis:ResidentialAffiliation>
            <hmis:TrackingMethod>4</hmis:TrackingMethod>
            <hmis:TargetPopulation>2</hmis:TargetPopulation>
            <hmis:ProjectCommonName>P1</hmis:ProjectCommonName>
            </hmis:Project>
    responses:
      201:
        description: Returns the ID of the newly created project.
        body:
          application/json:
            schema: client_id_json
            example: |
              {"ProjectID":"csssssaassasfdfreswssaaasdffrfre"}
  /{project_id}:
    uriParameters:
      project_id:
        displayName: Project Identifier 
        type: string
        example: ADBC11112AD111114111111111D1111V
    type:
      member:
        schema_json:  project_json
        schema_xml:  project_xml
    /affiliations:
      type: {
      collection: {
        id_schema_json: affiliation_id_json,  
        schema_json:  affiliation_json,
        schema_xml:  affiliation_xml,
        schema_array_json: affiliations_json,
        schema_array_xml: affiliations_xml
       }
      }
      get:
        queryParameters:
        responses:
          200:
            body:  
              application/json:
                example: |
                  "affiliations_ids":[{"AffiliationID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"AffiliationID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                schema: affiliation_ids_json  
      put:
        body:
          application/json:
            example: | 
              {"affiliations":[{"AffiliationID":"csssssaassasfdfreswssaaasdffrfre","ResProjectID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","ProjectID":"csssssaassasfdfreswssaaasdffrfregfr","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"},       {"AffiliationID":"abcsteaassasrdyreswssaaasdffrfre","ResProjectID":"aaaaaaaaaaaaaaaaaaaaaaaaaaabbbba","ProjectID":"csssssaaert6ssasfdfreswssaaasdffrfregfr","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"psmith"}]
          application/xml:
            example: |
              </hmis:Affiliations>
              <hmis:Affiliation hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100"> <hmis:AffiliationID>aserh2345htgdr6945678094rth34520</hmis:AffiliationID>
               <ResProjectID>sdrghbfurythncjdhydmkiuyhhgtdfrebxd</ResProjectID>
              <ProjectID>assdrghbfurythncjdhydmkiuyhhgtdfreb</ProjectID>
              </hmis:Affiliation>
              <hmis:Affiliation hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
                <ResProjectID>sdrghbfurythncjdhydmkiuyhhgtdfrebxd</ResProjectID>
              <ProjectID>assdrghbfurythncjdhydmkiuyhhgtdfreb</ProjectID>
              </hmis:Affiliation>  
              </hmis:Affiliations>
      post:
        body:
          application/json:
            schema: affiliation_json
              example:|
                {
                "AffiliationID":"csssssaassasfdfreswssaaasdffrfre",
                "DateCreated":"10-12-2014",
                "DateUpdated":"11-14-2014",
                "UserID":"gsmith"}
          application/xml:
            schema: affiliation_xml
              example:|
                <hmis:Affiliation hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
                <hmis:AffiliationID>aserh2345htgdr6945678094rth34520</hmis:AffiliationID>
                 <ResProjectID>sdrghbfurythncjdhydmkiuyhhgtdfrebxd</ResProjectID>
                <ProjectID>assdrghbfurythncjdhydmkiuyhhgtdfreb</ProjectID>
                </hmis:Affiliation>
        responses:
          201:
            description: Returns the ID of the newly created affiliation.
            body:
              application/json:
                schema: affiliation_id_json
                example: |
                  {"AffiliationID":"csssssaassasfdfreswssaaasdffrfre"}
      /{affiliation_id}:
        uriParameters:
          affiliation_id:
            displayName: Affiliation Identifier 
            type: string
            example: ADBC11112AD111114111111111D1111V
        type:
          member:
            schema_json:  affiliation_json
            schema_xml:  affiliation_xml
        get:
          description: Fetches one specific affiliation for a given project.
        put:
          description: Updates one specific affiliation for a specific project.
          body:
            application/json:
              example: |
                {
                  "AffiliationID" : "12345678901234567890123456789012",
                  "ResProjectID" : "ADBC1111211111114111111111D1111V",
                  "ProjectID" : "99123456789012345678901234567890"
                  "DateCreated" : "2012-04-23T18:25:43.511Z",
                  "DateUpdated" : "2013-04-23T18:25:43.511Z",
                  "UserID": "77123456789012345678901234567890"
                }
            application/xml:
              example: |
                <hmis:Affiliation hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                  <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                  <ResProjectID>sdrghbfurythncjdhydmkiuyhhgtdfrebxd</ResProjectID>
                <ProjectID>assdrghbfurythncjdhydmkiuyhhgtdfreb</ProjectID>
                </hmis:Affiliation>
        delete:
          description: Deletes one specific affiliation for a specific project.
    /funders:
      type: {
        collection: {
          id_schema_json: funder_id_json,  
          schema_json:  funder_json,
          schema_xml:  funder_xml,
          schema_array_json: funders_json,
          schema_array_xml: funders_xml
        }
      }
      get:
        queryParameters:
        responses:
          200:
            body:  
              application/json:
                example: |
                  "funders_ids":[{"FunderID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"FunderID":"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}]
                schema: funder_ids_json  
      put:
        body:
          application/json:
            example: | 
              {"funders":[{"FunderID":"csssssaassasfdfreswssaaasdffrfre","ProjectID":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","Funder":"Funder1","GrantID":"1csssssaassasfdfreswssaaasdffrfre","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"},       {"FunderID":"abcsteaassasrdyreswssdeaaasdffrfre","ProjectID":"aaaaaaaaaaaaaaaaaaaaaaaaaaabbbba","Funder":"Funder 2","GrantID":"2csssssaassasfdfreswssaaasdffrfre","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"psmith"}]
          application/xml:
            example: |
              <hmis:Funders>
              <hmis:Funder hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015
              -05-30T23:14:59"   hmis:userID="ned100"> <hmis:FunderID>aserh2345htgdr6945678094rth34520</hmis:FunderID>
              <hmis:GrantID>aserh2345htgdr6945678094rth34520</hmis:GrantID>
              </hmis:Funder>
              <hmis:Funder hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59"   hmis:userID="ned100">
               <hmis:FunderID>apprh2345htgdr6945678094rth34520</hmis:FunderID>
                <hmis:GrantID>apprh2345htgdr6945678094rth34520</hmis:GrantID>
              </hmis:Funder>  
              </hmis:Funders>
      post:
        body:
          application/json:
            schema: funder_json
              example:|
              {
                "FunderID":"csssssaassasfdfreswssaaasdffrfre",
                "DateCreated":"10-12-2014",
                "DateUpdated":"11-14-2014",
                "UserID":"gsmith"}
          application/xml:
            schema: funder_xml
              example:|
                <hmis:Funder hmis:dateCreated="2016-04-11T23:14:59Z" hmis:dateUpdated="2015-05-30T23:14:59" hmis:userID="ned100">
                <hmis:FunderID>aserh2345htgdr6945678094rth34520</hmis:FunderID>
                 <hmis:GrantID>apprh2345htgdr6945678094rth34520</hmis:GrantID>
                </hmis:Funder>
        responses:
          201:
            description: Returns the ID of the newly created funder.
            body:
              application/json:
                schema: funder_id_json
                example: |
                  {"FunderID":"csssssaassasfdfreswssaaasdffrfre"}
      /{funder_id}:
        uriParameters:
          funder_id:
            displayName: Funder Identifier 
            type: string
            example: ADBC11112AD111114111111111D1111V
        type:
          member:
            schema_json:  funder_json
            schema_xml:  funder_xml
        get:
          description: Fetches one specific funder for a given project.
        put:
          description: Updates one specific funder for a specific project.
          body:
            application/json:
              example: |
                {
                  "FunderID" : "12345678901234567890123456789012",
                  "Funder" : "23",
                  "ProjectID" : "99123456789012345678901234567890"
                  "DateCreated" : "2012-04-23T18:25:43.511Z",
                  "DateUpdated" : "2013-04-23T18:25:43.511Z",
                  "UserID": "77123456789012345678901234567890"
                }
            application/xml:
              example: |
                <hmis:Funder hmis:dateCreated="2015-05-08T23:14:59" hmis:dateUpdated="2015-01-27T23:14:59Z" hmis:userID="Hc8CQeYVWWj0dA9cWkDLe">
                  <hmis:ProjectEntryID>w5641</hmis:ProjectEntryID>
                   <hmis:GrantID>apprh2345htgdr6945678094rth34520</hmis:GrantID>
                </hmis:Funder>
        delete:
          description: Deletes one specific funder for a specific project
/project_cocs:
  type: {
    collection: {
        id_schema_json: project_coc_id_json,  
        schema_json:  project_coc_json,
        schema_xml:  project_coc_xml,
        schema_array_json: projects_coc_json,
        schema_array_xml: projects_coc_xml
    }
  }
  put:
    body:
      application/json:
        example: |
            {"projects":[{"ProjectCoCID":"csssssaassasfdfreswssaaasdffrfre","ProjectID":"csssssaassasfdfreswssaaasdffrfre","CoCCode":"AB-123","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"},       {"ProjectCoCID":"zxssssaassasfdfreswssaaasdffrfre","ProjectID":"abcsteaassasrdyreswssaaasdffrfre","CoCCode":"CD-456","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"psmith"}]
            }
  /{project_coc_id}:
    uriParameters:
      project_coc_id:
        displayName: Project CoC Identifier 
        type: string
        example: ADBC11112AD111114111111111D1111V
    type:
      member:
        schema_json: project_coc_json
        schema_xml: project_coc_xml
    get:
      body:
        application/json:
          example: |
           {"ProjectCoCID":"csssssaassasfdfreswssaaasdffrfre","ProjectID":"csssssaassasfdfreswssaaasdffrfre","CoCCode":"AB-123","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"}
    /inventories:
      type: {
        collection: {
            id_schema_json: inventory_id_json,  
            schema_json:  inventory_json,
            schema_xml:  inventory_xml,
            schema_array_json: inventories_json,
            schema_array_xml: inventories_xml
        }
      }
      put:
        body:
          application/json:
            example: |
               {"Inventories":[{"InventoryID":"csssssaassasfdfreswssaaasdffrfre","ProjectID":"csssssaassasfdfreswssaaasdffrfre","CoCCode":"AB-123", "InformationDate":"10-12-2014","UnitInventory":"7","BedInventory":"12","HMISParticipatingBeds":"3","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"{"InventoryID":"zxssssaassasfdfreswssaaasdffrfre","ProjectID":"abcsteaassasrdyreswssaaasdffrfre","CoCCode":"CD-456","InformationDate":"10-122014","UnitInventory":"7","BedInventory":"12","HMISParticipatingBeds":"3","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"psmith"}]}
      /{inventory_id}:
        uriParameters:
          inventory_id:
            displayName:  Inventory Identifier 
            type: string
            example: INVC11112AD111114111111111D1111V
        type:
          member:
            schema_json: inventory_json
            schema_xml: inventory_xml
    /sites:
      type: {
        collection: {
            id_schema_json: site_id_json,  
            schema_json:  site_json,
            schema_xml:  site_xml,
            schema_array_json: sites_json,
            schema_array_xml: sites_xml
        }
      }
      put:
        body:
          application/json:
            example: |
                {"sites":[{"SiteID":"csssssaassasfdfreswssaaasdffrfre","ProjectID":"csssssaassasfdfreswssaaasdffrfre","CoCCode":"AB-123", "PrincipalSite":"1","DateCreated":"10-12-2014","DateUpdated":"11-14-2014","UserID":"gsmith"},       {"SiteID":"zxssssaassasfdfreswssaaasdffrfre","ProjectID":"abcsteaassasrdyreswssaaasdffrfre","CoCCode":"CD-456","PrincipalSite":"1","DateCreated":"09-20-2014","DateUpdated":"10-21-2014","UserID":"psmith"}]
                }
      /{site_id}:
        uriParameters:
          site_id:
            displayName: Site Identifier 
            type: string
            example: ADBC11112AD111114111111111D1111V
        type:
          member:
            schema_json:  site_json
            schema_xml:  site_xm
                                   
schemas:
- affiliation_json: |-
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "affiliation",
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema", 
    "required": ["AffliationID", "ProjectID", "ResProjectID", "DateCreated", "DateUpdated", "UserID"],
      "properties": {   
      "AffliationID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ResProjectID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
           "DateCreated": {
          "type": "String",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "String",
          "format": "date-time"
          },
          "DateDeleted": {
          "type": "String",
          "format": "date-time"
          },
          "UserID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          }
        }
      }
- affiliation_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["AffiliationID"],
      "properties": {
        "AffiliationID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    } 
- affiliation_xml: |-
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="Affiliation" type="hmis:affiliation"/>
    </xs:schema> 
- affiliations_xml: |-
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="Affiliations" type="hmis:affiliations"/>
    </xs:schema>
- bulk_hmis_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="http://www.hudhdx.info/Resources/Vendors/4_0/HUD_HMIS.xsd">
      <xs:element name="Sources" type="hmis:sources"/>
    </xs:schema>
- client_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["PersonalID"],
      "properties": {
        "PersonalID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- client_ids_json: |
    {
      "type": "array",
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "client_ids",
      "items": { "$ref": "#/definitions/client_id" },
        "definitions": {
          "client_id": {
          "type": "object",
          "$schema": "http://json-schema.org/draft-04/schema",
          "required": ["PersonalID"],
            "properties": {
              "PersonalID": {
                "type": "string",
                "minLength": "32",
                "maxLength": "32",
                "minItems": 1,
                "uniqueItems": true,
                "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
              }
            }
          }
        }
      }
- client_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["PersonalID", "DateCreated", "DateUpdated", "UserID"],
      "properties": {
        "PersonalID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "FirstName": {
          "type": "string",
          "maxLength": "50"
        },
        "MiddleName": {
          "type": "string",
          "maxLength": "50"
        },
        "LastName": {
          "type": "string",
          "maxLength": "50"
        },
        "NameSuffix": {
          "type": "string",
          "maxLength": "50"
        },
        "NameDataQuality": {
          "type" : "integer"
        },
        "SSN": {
          "type": "string",
          "maxLength": "9"
        },
        "SSNDataQuality": {
          "type" : "integer"
        },
        "DOB": {
          "type": "string",
          "format": "date-time"
        },
        "DOBDataQuality": {
          "type": "integer"
        },
        "AmIndAKNative": {
          "type": "integer"
        },
        "Asian": {
          "type": "integer"
        },
        "BlackAfAmerican": {
          "type": "integer"
        },
        "NativeHIOtherPacific": {
          "type": "integer"
        },
        "White": {
          "type": "integer"
        },
        "RaceNone": {
          "type": "integer"
        },
        "Ethnicity": {
          "type": "integer"
        },
        "Gender": {
          "type": "integer"
        },
        "OtherGender": {
          "type": "string",
          "maxLength": "50"
        },
        "VeteranStatus": {
          "type": "integer"
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "UserID": {
          "type": "string",
          "maxLength": "32"
        },
        "DateDeleted": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
- clients_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "clients",
    "type": "array",
    "items": { "$ref": "#/definitions/client" },
    "definitions": {
      "client": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["PersonalID", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "PersonalID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          },
          "FirstName": {
           "type": "string",
           "maxLength": "50"
          },
          "MiddleName": {
            "type": "string",
            "maxLength": "50"
          },
          "LastName": {
            "type": "string",
            "maxLength": "50"
          },
          "NameSuffix": {
            "type": "string",
            "maxLength": "50"
          },
          "NameDataQuality": {
            "type" : "integer"
          },
          "SSN": {
            "type": "string",
            "maxLength": "9"
          },
          "SSNDataQuality": {
            "type" : "integer"
          },
          "DOB": {
            "type": "string",
            "format": "date-time"
          },
          "DOBDataQuality": {
            "type": "integer"
          },
          "AmIndAKNative": {
            "type": "integer"
          },
          "Asian": {
            "type": "integer"
          },
          "BlackAfAmerican": {
            "type": "integer"
          },
          "NativeHIOtherPacific": {
            "type": "integer"
          },
          "White": {
            "type": "integer"
          },
          "RaceNone": {
            "type": "integer"
          },
          "Ethnicity": {
            "type": "integer"
          },
          "Gender": {
            "type": "integer"
          },
          "OtherGender": {
            "type": "string",
            "maxLength": "50"
          },
          "VeteranStatus": {
            "type": "integer"
          },
          "DateCreated": {
           "type": "string",
           "format": "date-time"
          },
          "DateUpdated": {
           "type": "string",
           "format": "date-time"
          },
          "UserID": {
            "type": "string",
            "maxLength": "32"
          },
          "DateDeleted": {
          "type": "string",
          "format": "date-time"
          }
        }
      }
    }
- client_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Client" type="hmis:client"/>
    </xs:schema>
- clients_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Clients" type="hmis:clients"/>
    </xs:schema>
- commercialSexualExploitation_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "commercialSexualExploitation",
    "type": "object",
    "required": ["CommercialSexualExploitationID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "CommercialSexualExploitationID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
    },
    "ExchangeForSexPastThreeMonths": {
    "type": "Integer",
    },
    "CountOfExchangeForSex": {
    "type": "Integer",
    },
    "AskedOrForcedToExchangeForSex": {
    "type": "Integer",
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DataCollectionStage": {
      "type": "Integer",
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    }, 
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- commercialSexualExploitations_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "commercialSexualExploitations",
    "type": "array",
    "items": { "$ref": "#/definitions/commercialSexualExploitation" },
    "definitions": {
    "commercialSexualExploitation": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["CommercialSexualExploitationID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated",     "DateUpdated", "UserID"],
    "properties": {
    "CommercialSexualExploitationID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
      },
    "ExchangeForSexPastThreeMonths": {
    "type": "Integer",
    },
    "CountOfExchangeForSex": {
    "type": "Integer",
    },
    "AskedOrForcedToExchangeForSex": {
    "type": "Integer",
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DataCollectionStage": {
    "type": "Integer",
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    }, 
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- commercialSexualExploitation_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["CommercialSexualExploitationID"],
    "properties": {
    "CommercialSexualExploitationID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32",
    "minItems": 1,
    "uniqueItems": true,
    "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
    }
    }
    }
- commercialSexualExploitation_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="CommercialSexualExploitation" type="hmis:commercialSexualExploitation"/>
    </xs:schema>
- commercialSexualExploitations_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="CommercialSexualExploitations" type="hmis:commercialSexualExploitations"/>
    </xs:schema>
- connectionWithSOAR_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "connectionWithSOAR",
    "type": "object",
    "required": ["ConnectionWithSOARID","ExitID", "DateCreated","ExiteDate", "DateUpdated", "UserID"],
    "properties": {
      "ConnectionWithSOARID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- connectionWithSOARs_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "connectionWithSOARs",
    "type": "array",
    "items": { "$ref": "#/definitions/connectionWithSOAR" },
    "definitions": {
      "connectionWithSOAR": {
    "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ConnectionWithSOARID","ExitID", "DateDeleted", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "ConnectionWithSOARID": {
        "type": "String",
        "maxLength": "32",
          "minLength": "32" 
      },
        "ExitID": {
        "type": "String",
        "maxLength": "32"
        "minLength": "32"
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- connectionWithSOAR_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ConnectionWithSOARID"],
      "properties": {
      "ConnectionWithSOARID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- connectionWithSOAR_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="ConnectionWithSOAR" type="hmis:connectionWithSOAR"/>
    </xs:schema>
- connectionWithSOARs_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="ConnectionWithSOARs" type="hmis:connectionWithSOARs"/>
    </xs:schema>
- dateOfEngagement_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "dateOfEngagement",
    "type": "object",
    "required": ["DateOfEngagementID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "DateOfEngagementID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "DateOfEngagement": {
      "type": "String",
      "format": "date-time"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      }
     }
    }

- dateOfEngagements_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "dateOfEngagements",
    "type": "array",
    "items": { "$ref": "#/definitions/dateOfEngagement" },
    "definitions": {
    "dateOfEngagement": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["DateOfEngagementID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
      "properties": {
      "DateOfEngagementID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "DateOfEngagement": {
      "type": "String",
      "format": "date-time"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "DateDeleted": {
      "type": "string",
      "format": "date-time"
      }
     }
    }
- dateOfEngagement_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["DateOfEngagementID"],
      "properties": {
        "DateOfEngagementID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
        }
      }
    }
- dateOfEngagement_xml: |
      <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
      <xs:element name="DateOfEngagements" type="hmis:dateOfEngagement"/>
      </xs:schema>
- dateOfEngagements_xml: |
      <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="DateOfEngagements" type="hmis:dateOfEngagements"/>
      </xs:schema>
- disabilities_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "disabilities",
    "type": "object",
    "required": ["DisabilitiesID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
      "properties": {
        "DisabilitiesID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
        },
        "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        },
        "InformationDate": {
        "type": "String",
        "format": "date-time"
        },
        "DisabilityType": {
        "type": "Integer",
        },
        "DisabilityResponse": {
        "type": "Integer",
        },
        "IndefiniteAndImpairs": {
        "type": "Integer",
        },
        "DocumentationOnFile": {
        "type": "Integer",
        },
        "ReceivingServices": {
        "type": "Integer",
        },
        "PATHHowConfirmed": {
        "type": "Integer",
        },
        "PATHSMIInformation": {
        "type": "Integer",
        },
        "DataCollectionStage": {
        "type": "Integer",
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {  
        "type": "String",
        "format": "date-time"
        },,
        "DateDeleted": {  
        "type": "String",
        "format": "date-time"
        }
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        }
       }
      }
- disabilitieses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "disabilitieses",
    "type": "array",
    "items": { "$ref": "#/definitions/disabilities" },
    "definitions": {
      "disabilities": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["DisabilitiesID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "DisabilitiesID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32" 
          },
          "ProjectEntryID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "String",
          "format": "date-time"
          },
          "DisabilityType": {
          "type": "Integer",
          },
          "DisabilityResponse": {
          "type": "Integer",
          },
          "IndefiniteAndImpairs": {
          "type": "Integer",
          },
          "DocumentationOnFile": {
          "type": "Integer",
          },
          "ReceivingServices": {
          "type": "Integer",
          },
          "PATHHowConfirmed": {
          "type": "Integer",
          },
          "PATHSMIInformation": {
          "type": "Integer",
          },
          "DataCollectionStage": {
          "type": "Integer",
          },
          "DateCreated": {
          "type": "String",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "String",
          "format": "date-time"
          },,
          "DateDeleted": {  
          "type": "String",
          "format": "date-time"
          }
          "UserID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"  
          }
        }
      }
- disabilities_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["DisabilitiesID"],
      "properties": {
        "DisabilitiesID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32",
        "minItems": 1,
        "uniqueItems": true,
        "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- disabilities_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="Disabilities" type="hmis:disabilities"/>
    </xs:schema>
- disabilitieses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="Disabilitieses" type="hmis:disabilitieses"/>
    </xs:schema>
- domesticViolence_json: |
    "$schema": "http://json-schema.org/draft-04/schema",    
    "title": "domesticViolence",
    "type": "object",
    "required": ["DomesticViolenceID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "DomesticViolenceID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InformationDate": {
      "type": "String",
      "format": "date-time"
      },
      "DomesticViolenceVictim": {
      "type": "Integer",
      },
      "WhenOccurred": {
      "type": "Integer",
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      }
     }
    }
- domesticViolences_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "domesticViolences",
    "type": "array",
    "items": { "$ref": "#/definitions/domesticViolence" },
    "definitions": {
      "domesticViolence": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["DomesticViolenceID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated",
        "UserID"],
        "properties": {
          "DomesticViolenceID": {
            "type": "String",
            "maxLength": "32",
            "minLength": "32" 
          },
          "ProjectEntryID": {
            "type": "String",
            "maxLength": "32",
            "minLength": "32"
          },
          "InformationDate": {
            "type": "String",
            "format": "date-time"
          },
          "DomesticViolenceVictim": {
          "type": "Integer",
          },
          "WhenOccurred": {
          "type": "Integer",
          },
          "DataCollectionStage": {
          "type": "Integer",
          },
          "DateCreated": {
          "type": "String",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "String",
          "format": "date-time"
          },
          "DateDeleted": {
          "type": "String",
          "format": "date-time"
          },
          "UserID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          }
        }
      }
- domesticViolence_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["DomesticViolenceID"],
      "properties": {
      "DomesticViolenceID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- domesticViolence_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="DomesticViolence" type="hmis:domesticViolence"/>
    </xs:schema>
- domesticViolences_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="DomesticViolences" type="hmis:domesticViolences"/>
    </xs:schema>
- employment_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "employment",
    "type": "object",
    "required": ["EmploymentID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "EmploymentID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
        },
      "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
      },
      "InformationDate": {
        "type": "String",
        "format": "date-time"
      },
      "Employed": {
        "type": "Integer",
      },
      "EmploymentType": {
        "type": "Integer",
      },
      "NotEmployedReason": {
        "type": "Integer",
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
        "type": "String",
        "format": "date-time"
      },
      "DateUpdated": {
        "type": "String",
        "format": "date-time"
      },
      "DateDeleted": {
        "type": "String",
        "format": "date-time"
      },
      "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
      }
     }
    }
- employments_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "employments",
    "type": "array",
    "items": { "$ref": "#/definitions/employment" },
    "definitions": {
      "employment": {
        "type": "object", 
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["EmploymentID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "EmploymentID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32" 
          },
        "ProjectEntryID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
        "InformationDate": {
          "type": "String",
          "format": "date-time"
          },
        "Employed": {
          "type": "Integer",
          },
        "EmploymentType": {
          "type": "Integer",
          },
        "NotEmployedReason": {
          "type": "Integer",
        },
        "DataCollectionStage": {
        "type": "Integer",
        },
        "DateCreated": {
          "type": "String",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "String",
          "format": "date-time"
        },
        "DateDeleted": {
          "type": "String",
          "format": "date-time"
        },
        "UserID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
        }
      }
    }
- employment_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["EmploymentID"],
      "properties": {
        "EmploymentID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
        }
      }
    }
- employment_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="Employment" type="hmis:employment"/>
    </xs:schema>
- employments_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="Employments" type="hmis:employments"/>
    </xs:schema>
- enrollment_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ProjectEntryID"],
      "properties": {
        "ProjectEntryID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- enrollment_ids_json: |
    {
      "type": "array",
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "enrollment_ids",
      "items": { "$ref": "#/definitions/enrollment_id" },
        "definitions": {
          "enrollment_id": {
          "type": "object",
          "$schema": "http://json-schema.org/draft-04/schema",
          "required": ["ProjectEntryID"],
            "properties": {
              "ProjectEntryID": {
                "type": "string",
                "minLength": "32",
                "maxLength": "32",
                "minItems": 1,
                "uniqueItems": true,
                "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
              }
            }
          }
        }
     }
- enrollment_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ProjectEntryID", "PersonalID", "ProjectID", "EntryDate", "HouseholdID", "RelationshipToHoH", "DateCreated", "DateUpdated", "UserID"],
      "properties": {
        "ProjectEntryID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "PersonalID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "ProjectID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "EntryDate": {
          "type": "string",
          "format": "date-time"
        },
        "HouseholdID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "RelationshipToHoH": {
         "type": "integer"
        },
        "ResidencePrior": {
         "type": "integer"
        },
        "OtherResidencePrior": {
          "type": "string",
          "maxLength": "50"
        },
        "ResidencePriorLengthOfStay": {
          "type": "integer"
        },
        "DisablingCondition": {
          "type": "integer"
        },
        "ContinuouslyHomelessOneYear": {
          "type": "integer"
        },
        "TimesHomelessPastThreeYears": {
          "type": "integer"
        },
        "MonthsHomelessPastThreeYears": {
          "type": "integer"
        },
        "MonthsHomelessThisTime": {
          "type": "string",
          "pattern": "^[0-9]{1,3}$"
        },
        "StatusDocumented": {
          "type": "integer"
        },
        "HousingStatus": {
          "type": "integer"
        },
        "DateOfEngagement": {
          "type": "string",
          "format": "date-time"
        },
        "InPermanentHousing": {
          "type": "integer"
        },
        "ResidentialMoveInDate": {
          "type": "string",
          "format": "date-time"
        },
        "DateOfPATHStatus": {
          "type": "string",
          "format": "date-time"
        },
        "ClientEnrolledInPATH": {
          "type": "integer"
        },
        "ReasonNotEnrolled": {
          "type": "integer"
        },
        "WorstHousingSituation": {
          "type": "integer"
        },
        "PercentAMI": {
          "type": "integer"
        },
        "LastPermanentStreet": {
          "type": "string",
          "maxLength": "100"
        },
        "LastPermanentCity": {
          "type": "string",
          "maxLength": "50"
        },
        "LastPermanentState": {
          "type": "string",
          "maxLength": "2",
          "pattern": "^[a-zA-Z]{2}$"
        },
        "LastPermanentZIP": {
          "type": "string",
          "maxLength": "5",
          "pattern": "^[0-9]{5}$"
        },
        "AddressDataQuality": {
          "type": "integer"
        },
        "DateOfBCPStatus": {
          "type": "string",
          "format": "date-time"
        },
        "FYSBYouth": {
          "type": "integer"
        },
        "ReasonNoServices": {
          "type": "integer"
        },
        "SexualOrientation": {
          "type": "integer"
        },
        "FormerWardChildWelfare": {
          "type": "integer"
        },
        "ChildWelfareYears": {
          "type": "integer"
        },
        "ChildWelfareMonths": {
          "type": "integer"
        },
        "FormerWardJuvenileJustice": {
          "type": "integer"
        },
        "JuvenileJusticeYears": {
          "type": "integer"
        },
        "JuvenileJusticeMonths": {
          "type": "integer"
        },
        "HouseholdDynamics": {
          "type": "integer"
        },
        "SexualOrientationGenderIDYouth": {
          "type": "integer"
        },
        "SexualOrientationGenderIDFam": {
          "type": "integer"
        },
        "HousingIssuesYouth": {
          "type": "integer"
        },
        "HousingIssuesFam": {
          "type": "integer"
        },
        "SchoolEducationalIssuesYouth": {
          "type": "integer"
        },
        "SchoolEducationalIssuesFam": {
          "type": "integer"
        },
        "UnemploymentYouth": {
          "type": "integer"
        },
        "UnemploymentFam": {
          "type": "integer"
        },
        "MentalHealthIssuesYouth": {
          "type": "integer"
        },
        "MentalHealthIssuesFam": {
          "type": "integer"
        },
        "HealthIssuesYouth": {
          "type": "integer"
        },
        "HealthIssuesFam": {
          "type": "integer"
        },
        "PhysicalDisabilityYouth": {
          "type": "integer"
        },
        "PhysicalDisabilityFam": {
          "type": "integer"
        },
        "MentalDisabilityYouth": {
          "type": "integer"
        },
        "MentalDisabilityFam": {
          "type": "integer"
        },
        "AbuseAndNeglectYouth": {
          "type": "integer"
        },
        "AbuseAndNeglectFam": {
          "type": "integer"
        },
        "AlcoholDrugAbuseYouth": {
          "type": "integer"
        },
        "AlcoholDrugAbuseFam": {
          "type": "integer"
        },
        "InsufficientIncome": {
          "type": "integer"
        },
        "ActiveMilitaryParent": {
          "type": "integer"
        },
        "IncarceratedParent": {
          "type": "integer"
        },
        "IncarceratedParentStatus": {
          "type": "integer"
        },
        "ReferralSource": {
          "type": "integer"
        },
        "CountOutreachReferralApproaches": {
          "type": "integer"
        },
        "ExchangeForSexPastThreeMonths": {
          "type": "integer"
        },
        "CountOfExchangeForSex": {
          "type": "integer"
        },
        "AskedOrForcedToExchangeForSex": {
          "type": "integer"
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "DateDeleted": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
- enrollment_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Enrollment" type="hmis:enrollment"/>
    </xs:schema>
- enrollments_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "enrollments",
    "type": "array",
    "items": { "$ref": "#/definitions/enrollment" },
    "definitions": {
        "enrollment": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["ProjectEntryID", "PersonalID", "ProjectID", "EntryDate", "HouseholdID", "RelationshipToHoH", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "ProjectEntryID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          },
          "PersonalID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          },
          "ProjectID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          },
          "EntryDate": {
            "type": "string",
            "format": "date-time"
          },
          "HouseholdID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          },
          "RelationshipToHoH": {
           "type": "integer"
          },
          "ResidencePrior": {
           "type": "integer"
          },
          "OtherResidencePrior": {
            "type": "string",
            "maxLength": "50"
          },
          "ResidencePriorLengthOfStay": {
            "type": "integer"
          },
          "DisablingCondition": {
            "type": "integer"
          },
          "ContinuouslyHomelessOneYear": {
            "type": "integer"
          },
          "TimesHomelessPastThreeYears": {
            "type": "integer"
          },
          "MonthsHomelessPastThreeYears": {
            "type": "integer"
          },
          "MonthsHomelessThisTime": {
            "type": "string",
            "pattern": "^[0-9]{1,3}$"
          },
          "StatusDocumented": {
            "type": "integer"
          },
          "HousingStatus": {
            "type": "integer"
          },
          "DateOfEngagement": {
            "type": "string",
            "format": "date-time"
          },
          "InPermanentHousing": {
            "type": "integer"
          },
          "ResidentialMoveInDate": {
            "type": "string",
            "format": "date-time"
          },
          "DateOfPATHStatus": {
            "type": "string",
            "format": "date-time"
          },
          "ClientEnrolledInPATH": {
            "type": "integer"
          },
          "ReasonNotEnrolled": {
            "type": "integer"
          },
          "WorstHousingSituation": {
            "type": "integer"
          },
          "PercentAMI": {
            "type": "integer"
          },
          "LastPermanentStreet": {
            "type": "string",
            "maxLength": "100"
          },
          "LastPermanentCity": {
            "type": "string",
            "maxLength": "50"
          },
          "LastPermanentState": {
            "type": "string",
            "maxLength": "2",
            "pattern": "^[a-zA-Z]{2}$"
          },
          "LastPermanentZIP": {
            "type": "string",
            "maxLength": "5",
            "pattern": "^[0-9]{5}$"
          },
          "AddressDataQuality": {
            "type": "integer"
          },
          "DateOfBCPStatus": {
            "type": "string",
            "format": "date-time"
          },
          "FYSBYouth": {
            "type": "integer"
          },
          "ReasonNoServices": {
            "type": "integer"
          },
          "SexualOrientation": {
            "type": "integer"
          },
          "FormerWardChildWelfare": {
            "type": "integer"
          },
          "ChildWelfareYears": {
            "type": "integer"
          },
          "ChildWelfareMonths": {
            "type": "integer"
          },
          "FormerWardJuvenileJustice": {
            "type": "integer"
          },
          "JuvenileJusticeYears": {
            "type": "integer"
          },
          "JuvenileJusticeMonths": {
            "type": "integer"
          },
          "HouseholdDynamics": {
            "type": "integer"
          },
          "SexualOrientationGenderIDYouth": {
            "type": "integer"
          },
          "SexualOrientationGenderIDFam": {
            "type": "integer"
          },
          "HousingIssuesYouth": {
            "type": "integer"
          },
          "HousingIssuesFam": {
            "type": "integer"
          },
          "SchoolEducationalIssuesYouth": {
            "type": "integer"
          },
          "SchoolEducationalIssuesFam": {
            "type": "integer"
          },
          "UnemploymentYouth": {
            "type": "integer"
          },
          "UnemploymentFam": {
            "type": "integer"
          },
          "MentalHealthIssuesYouth": {
            "type": "integer"
          },
          "MentalHealthIssuesFam": {
            "type": "integer"
          },
          "HealthIssuesYouth": {
            "type": "integer"
          },
          "HealthIssuesFam": {
            "type": "integer"
          },
          "PhysicalDisabilityYouth": {
            "type": "integer"
          },
          "PhysicalDisabilityFam": {
            "type": "integer"
          },
          "MentalDisabilityYouth": {
            "type": "integer"
          },
          "MentalDisabilityFam": {
            "type": "integer"
          },
          "AbuseAndNeglectYouth": {
            "type": "integer"
          },
          "AbuseAndNeglectFam": {
            "type": "integer"
          },
          "AlcoholDrugAbuseYouth": {
            "type": "integer"
          },
          "AlcoholDrugAbuseFam": {
            "type": "integer"
          },
          "InsufficientIncome": {
            "type": "integer"
          },
          "ActiveMilitaryParent": {
            "type": "integer"
          },
          "IncarceratedParent": {
            "type": "integer"
          },
          "IncarceratedParentStatus": {
            "type": "integer"
          },
          "ReferralSource": {
            "type": "integer"
          },
          "CountOutreachReferralApproaches": {
            "type": "integer"
          },
          "ExchangeForSexPastThreeMonths": {
            "type": "integer"
          },
          "CountOfExchangeForSex": {
            "type": "integer"
          },
          "AskedOrForcedToExchangeForSex": {
            "type": "integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          },
          "DateDeleted": {
          "type": "string",
          "format": "date-time"
          }
        }
      }
    }
- enrollments_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Enrollments" type="hmis:enrollments"/>
- exitHousingAssessment_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "exitHousingAssessment",
    "type": "object",
    "required": ["ExitHousingAssessmentID","ExitID", "DateCreated","ExiteDate", "DateUpdated", "UserID"],
    "properties": {
      "ExitHousingAssessmentID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "HousingAssessment": {
      "type": "Integer",
      },
      "SubsidyInformation": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- exitHousingAssessments_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "exitHousingAssessments",
    "type": "array",
    "items": { "$ref": "#/definitions/exitHousingAssessment" },
    "definitions": {
      "exitHousingAssessment": {
    "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ExitHousingAssessmentID","ExitID", "DateDeleted", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "ExitHousingAssessmentID": {
        "type": "String",
        "maxLength": "32",
          "minLength": "32" 
      },
        "ExitID": {
        "type": "String",
        "maxLength": "32"
        "minLength": "32"
        },
        "HousingAssessment": {
        "type": "Integer",
        },
        "SubsidyInformation": {
        "type": "Integer",
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- exitHousingAssessment_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ExitHousingAssessmentID"],
      "properties": {
      "ExitHousingAssessmentID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- exitHousingAssessment_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="ExitHousingAssessment" type="hmis:exitHousingAssessment"/>
    </xs:schema>
- exitHousingAssessments_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="ExitHousingAssessments" type="hmis:exitHousingAssessments"/>
    </xs:schema>
- exitPlansActions_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "exitPlansActions",
    "type": "object",
    "required": ["ExitPlansActionsID","ExitID", "DateCreated","ExiteDate", "DateUpdated", "UserID"],
    "properties": {
      "ExitPlansActionsID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "WrittenAftercarePlan": {
      },
      "ExitID": {
      "type": "String",
      "maxLength": "50"
      "minLength": "50"
      },
      "AssistanceMainstreamBenefits": {
      "type": "Integer",
      },
      "PermanentHousingPlacement": {
      "type": "Integer",
      },
      "TemporaryShelterPlacement": {
      "type": "Integer",
      },
      "ExitCounseling": {
      "type": "Integer",
      },
      "FurtherFollowUpServices": {
      "type": "Integer",
      },
      "ScheduledFollowUpContacts": {
      "type": "Integer",
      },
      "ResourcePackage": {
      "type": "Integer",
      },
      "OtherAftercarePlanOrAction": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "Integer",
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- exitPlansActionses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "exitPlansActionses",
    "type": "array",
    "items": { "$ref": "#/definitions/exitPlansActions" },
    "definitions": {
      "exitPlansActions": {
    "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ExitPlansActionsID","ExitID", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "ExitPlansActionsID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
        },
        "WrittenAftercarePlan": {
        "type": "Integer",
        },
        "ExitID": {
        "type": "String",
        "maxLength": "50"
        "minLength": "50"
        },
        "AssistanceMainstreamBenefits": {
        "type": "Integer",
        },
        "PermanentHousingPlacement": {
        "type": "Integer",
        },
        "TemporaryShelterPlacement": {
        "type": "Integer",
        },
        "ExitCounseling": {
        "type": "Integer",
        },
        "FurtherFollowUpServices": {
        "type": "Integer",
        },
        "ScheduledFollowUpContacts": {
        "type": "Integer",
        },
        "ResourcePackage": {
        "type": "Integer",
        },
        "OtherAftercarePlanOrAction": {
        "type": "Integer",
        },
        "DateCreated": {
        "type": "Integer",
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- exitPlansActions_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ExitPlansActionsID"],
      "properties": {
      "ExitPlansActionsID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- exitPlansActions_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="ExitPlansActions" type="hmis:exitPlansActions"/>
    </xs:schema>
- exitPlansActionses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="ExitPlansActionses" type="hmis:exitPlansActionses"/>
    </xs:schema>
- exit_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "exit",
    "type": "object",
    "required": ["ExitID","ProjectEntryID", "DateCreated","ExiteDate", "DateUpdated", "UserID"],
    "properties": {
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "ExitDate": {
      "type": "String",
      "format": "date-time"
      },
      "Destination": {
      "type": "Integer",
      },
      "OtherDestination": {
      "type": "String",
      "maxLength": "50"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- exits_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "exits",
    "type": "array",
    "items": { "$ref": "#/definitions/exit" },
    "definitions": {
      "exit": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ExitID","ProjectEntryID", "DateCreated","ExitDate" "DateUpdated", "UserID"],
        "properties": {
        "ExitID": {
        "type": "String",
        "maxLength": "32",
          "minLength": "32" 
        },
          "ProjectEntryID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
        },
        "ExitDate": {
        "type": "String",
        "format": "date-time"
        },
        "Destination": {
        "type": "Integer",
        },
        "OtherDestination": {
        "type": "String",
        "maxLength": "50"
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- exit_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ExitID"],
      "properties": {
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- exit_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="Exit" type="hmis:exit"/>
    </xs:schema>
- exits_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="Exits" type="hmis:exits"/>
    </xs:schema>
- familyReunification_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "familyReunification",
    "type": "object",
    "required": ["FamilyReunificationID","ExitID","DateCreated","ExiteDate", "DateUpdated", "UserID"],
    "properties": {
      "FamilyReunificationID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "FamilyReunificationAchieved": {
      "type":"Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- familyReunifications_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "familyReunifications",
    "type": "array",
    "items": { "$ref": "#/definitions/familyReunification" },
    "definitions": {
      "familyReunification": {
    "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["FamilyReunificationID","ExitID","FamilyReunificationAchieved"  "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "FamilyReunificationID": {
        "type": "String",
        "maxLength": "32",
          "minLength": "32" 
      },
        "FamilyReunificationAchieved": {
        "type":"Integer",
        },
        "ExitID": {
        "type": "String",
        "maxLength": "50"
        "minLength": "50"
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- familyReunification_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["FamilyReunificationID"],
      "properties": {
      "FamilyReunificationID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- familyReunification_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="FamilyReunification" type="hmis:familyReunification"/>
    </xs:schema>
- familyReunifications_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="FamilyReunifications" type="hmis:familyReunifications"/>
    </xs:schema>
- formerWardJuvenileJustices_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "formerWardJuvenileJustices",
    "type": "array",
    "items": { "$ref": "#/definitions/formerWardJuvenileJustice" },
    "definitions": {
    "formerWardJuvenileJustice": {
    "type":"object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["FormerWardJuvenileJusticeID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "FormerWardJuvenileJusticeID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
    },
    "FormerWardJuvenileJustice": {
    "type": "Integer",
    },
    "JuvenileJusticeYears": {
    "type": "Integer",
    },
    "JuvenileJusticeMonths": {
    "type": "Integer",
    },
     "DataCollectionStage": {
      "type": "Integer",
      },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- formerWardJuvenileJustice_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["FormerWardJuvenileJusticeID"],
    "properties": {
    "FormerWardJuvenileJusticeID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32",
        "minItems": 1,
        "uniqueItems": true,
        "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
    }
    }
- formerWardJuvenileJustice_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="FormerWardJuvenileJustice" type="hmis:formerWardJuvenileJustice"/>
    </xs:schema>
- formerWardJuvenileJustices_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="FormerWardJuvenileJustices" type="hmis:formerWardJuvenileJustices"/>
    </xs:schema>

- formerWardChildWelfare_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "formerWardChildWelfare",
    "type": "object",
    "required": ["FormerWardChildWelfareID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "FormerWardChildWelfareID": {
    "type": "String",    
     "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
    },
    "FormerWardChildWelfare": {
    "type": "Integer",
    },
    "ChildWelfareYears": {
    "type": "Integer",
    },
    "ChildWelfareMonths": {
    "type": "Integer",
    },
    "DataCollectionStage": {
      "type": "Integer",
      },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
            }
          }
- formerWardChildWelfares_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "formerWardChildWelfares",
    "type": "array",
    "items": { "$ref": "#/definitions/formerWardChildWelfare" },
    "definitions": {
    "formerWardChildWelfare": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["FormerWardChildWelfareID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
      "properties": {
        "FormerWardChildWelfareID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
      },
      "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
      },
      "InformationDate": {
        "type": "String",
        "format": "date-time"
        },
        "FormerWardChildWelfare": {
        "type": "Integer",
        },
        "ChildWelfareYears": {
        "type": "Integer",
        },
        "ChildWelfareMonths": {
        "type": "Integer",
        },
        "DataCollectionStage": {
        "type": "Integer",
        },
        "DateCreated": {
          "type": "String",
          "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
      }
      }
- formerWardChildWelfare_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["FormerWardChildWelfareID"],
    "properties": {
    "FormerWardChildWelfareID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32",
    "minItems": 1,
    "uniqueItems": true,
    "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
    }
    }
    }
- formerWardChildWelfare_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="FormerWardChildWelfare" type="hmis:formerWardChildWelfare"/>
    </xs:schema>
- formerWardChildWelfares_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="FormerWardChildWelfares" type="hmis:formerWardChildWelfares"/>
    </xs:schema>
- funder_json: |-
   "title":"funder".
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema", 
    "required": ["FunderID", "ProjectID", "Funder", "StartDate", "DateCreated", "DateUpdated", "UserID","ExportID"],
    "properties": {
            "FunderID": {
            "type": "String",
            "maxLength": "32",
            "minLength": "32"
          },
          "ProjectID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "Funder": {
          "type": "String",
          "maxLength": "50"
          },
          "GrantID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "StartDate": {
          "type": "String",
          "format": "date-time"
          },
          "EndDate": {
          "type": "String",
          "format": "date-time"
          },
          "EndDate": {
          "type": "String",
          "format": "date-time"
          },
          "DateCreated": {
          "type": "String",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "String",
          "format": "date-time"
          },
          "DateDeleted": {
          "type": "String",
          "format": "date-time"
          },
          "UserID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ExportID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          }
        }
      }
     } 
- funder_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["FunderID"],
      "properties": {
        "InventoryID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    } 
- funders_json: |-
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "funders",
    "type": "array",
    "items": { "$ref": "#/definitions/funder" },
    "definitions": {
      "funder": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["FunderID", "ProjectID", "Funder", "StartDate", "DateCreated", "DateUpdated", "UserID","ExportID"],
        "properties": {
          "FunderID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "Funder": {
          "type": "String",
          "maxLength": "50"
          },
          "GrantID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "StartDate": {
          "type": "String",
          "format": "date-time"
          },
          "EndDate": {
          "type": "String",
          "format": "date-time"
          },
          "EndDate": {
          "type": "String",
          "format": "date-time"
          },
          "DateCreated": {
          "type": "String",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "String",
          "format": "date-time"
          },
          "DateDeleted": {
          "type": "String",
          "format": "date-time"
          },
          "UserID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ExportID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          }
        }
      }    
- funder_xml: |-
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="Funder" type="hmis:funder"/>
    </xs:schema>
- funders_xml: |-
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="Funders" type="hmis:funders"/>
    </xs:schema>
- healthInsurance_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "healthInsurance",
    "type": "object",
    "required": ["healthInsuranceID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "healthInsuranceID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "InsuranceFromAnySource":{
            "type": "Integer"
          },
           "Medicaid":{
            "type": "Integer"
          },
           "NoMedicaidReason":{
            "type": "Integer"
          },
           "Medicare":{
            "type": "Integer"
          },
           "NoMedicareReason":{
            "type": "Integer"
          },
           "SCHIP":{
            "type": "Integer"
          },
           "NoSCHIPReason":{
            "type": "Integer"
          },
           "VAMedicalServices":{
            "type": "Integer"
          },
           "NoVAMedReason":{
            "type": "Integer"
          },
           "EmployerProvided":{
            "type": "Integer"
          },
          "NoEmployerProvidedReason":{
          "type": "Integer"
          },
            "COBRA":{
            "type": "Integer"
          },
            "NoCOBRAReason":{
            "type": "Integer"
          },
            "PrivatePay":{
            "type": "Integer"
          },
            "NoPrivatePayReason":{
            "type": "Integer"
          },
            "StateHealthIns":{
            "type": "Integer"
          },        
            "NoStateHealthInsReason":{
            "type": "Integer"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }  
      }
- healthInsurance_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["healthInsuranceID"],
      "properties": {
        "healthInsuranceID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- healthInsurances_json: |
     "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "healthInsurances",
      "type": "array",
      "items": { "$ref": "#/definitions/healthInsurance" },
      "definitions": { 
      "healthInsurance": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["healthInsuranceID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "healthInsuranceID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "InsuranceFromAnySource":{
            "type": "Integer"
          },
           "Medicaid":{
            "type": "Integer"
          },
           "NoMedicaidReason":{
            "type": "Integer"
          },
           "Medicare":{
            "type": "Integer"
          },
           "NoMedicareReason":{
            "type": "Integer"
          },
           "SCHIP":{
            "type": "Integer"
          },
           "NoSCHIPReason":{
            "type": "Integer"
          },
           "VAMedicalServices":{
            "type": "Integer"
          },
           "NoVAMedReason":{
            "type": "Integer"
          },
           "EmployerProvided":{
            "type": "Integer"
          },
            "NoEmployerProvidedReason":{
            "type": "Integer"
          },
            "COBRA":{
            "type": "Integer"
          },
            "NoCOBRAReason":{
            "type": "Integer"
          },
            "PrivatePay":{
            "type": "Integer"
          },
            "NoPrivatePayReason":{
            "type": "Integer"
          },
            "StateHealthIns":{
            "type": "Integer"
          },        
            "NoStateHealthInsReason":{
            "type": "Integer"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }  
      }
- healthInsurance_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="HealthInsurance" type="hmis:healthInsurance"/>
    </xs:schema>
- healthInsurances_xml: |
     <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="HealthInsurances" type="hmis:healthInsurances"/>
      </xs:schema>
- healthStatus_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "healthStatus",
    "type": "object",
    "required": ["HealthStatusID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "HealthStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InformationDate": {
      "type": "String",
      "format": "date-time"
      },
      "HealthCategory": {
      "type": "Integer",
      },
      "HealthStatus": {
      "type": "Integer",
      },
      "DueDate": {
      "type": "String",
      "format": "date-time"
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- healthStatuses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "healthStatuses",
    "type": "array",
    "items": { "$ref": "#/definitions/healthStatus" },
    "definitions": {
      "healthStatus": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["HealthStatusID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated","UserID"],
      "properties": {
      "HealthStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InformationDate": {
      "type": "String",
      "format": "date-time"
      },
      "HealthCategory": {
      "type": "Integer",
      },
      "HealthStatus": {
      "type": "Integer",
      },
      "DueDate": {
      "type": "String",
      "format": "date-time"
      },
       "DataCollectionStage": {
      "type": "Integer",
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- healthStatus_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["HealthStatusID"],
    "properties": {
    "HealthStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
    }
    }
    }
- healthStatus_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="HealthStatus" type="hmis:healthStatus"/>
    </xs:schema>
- healthStatuses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="HealthStatuses" type="hmis:healthStatuses"/>
    </xs:schema>
- housingAssessmentDisposition_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "HousingAssessmentDisposition",
    "type": "object",
    "required": ["HousingAssessmentDispositionID","ExitID", "DateCreated","DateUpdated", "UserID"],
    "properties": {
      "ExitHousingAssessmentID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "HousingAssessment": {
      "type": "Integer",
      },
      "OtherDisposition": {
      "type": "String",
      "maxLength": "50",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- housingAssessmentDispositions_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "housingAssessmentDispositions",
    "type": "array",
    "items": { "$ref": "#/definitions/exitHousingAssessment" },
    "definitions": {
      "housingAssessmentDisposition": {
      "type": "object",      
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["HousingAssessmentDispositionID","ExitID", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "HousingAssessmentDispositionID": {
        "type": "String",
        "maxLength": "32",
          "minLength": "32" 
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "HousingAssessment": {
        "type": "Integer",
        },
        "OtherDisposition": {
        "type": "String",
        "maxLength": "50",
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- housingAssessmentDisposition_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ExitHousingAssessmentID"],
      "properties": {
      "ExitHousingAssessmentID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- housingAssessmentDisposition_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="HousingAssessmentDisposition" type="hmis:housingAssessmentDisposition"/>
    </xs:schema>
- housingAssessmentDispositions_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="HousingAssessmentDispositions" type="hmis:housingAssessmentDispositions"/>
    </xs:schema>
- healthStatus_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["HealthStatusID"],
    "properties": {
    "HealthStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
    }
    }
    }
- healthStatus_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="HealthStatus" type="hmis:healthStatus"/>
    </xs:schema>
- healthStatuses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="HealthStatuses" type="hmis:healthStatuses"/>
    </xs:schema>
- incomeAndSources_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "incomeAndSources",
    "type": "object",
    "required": ["incomeAndSourcesID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "incomeAndSourcesID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "IncomeFromAnySource": {
            "type": "Integer"
          },
          "TotalMonthlyIncome":{
            "type": "Number"
          },
          "Earned": {
            "type": "Integer"
          },
          "EarnedAmount":{
            "type": "Number"
          },
          "Unemployment": {
            "type": "Integer"
          },
           "UnemploymentAmount":{
            "type": "Number"
          },
          "SSI": {
            "type": "Integer"
          },
           "SSIAmount":{
            "type": "Number"
          },
          "SSDI": {
            "type": "Integer"
          },
           "SSDIAmount":{
            "type": "Number"
          },
          "VADisabilityService": {
            "type": "Integer"
          },
           "VADisabilityServiceAmount":{
            "type": "Number"
          },
          "PrivateDisability": {
            "type": "Integer"
          },
           "PrivateDisabilityAmount":{
            "type": "Number"
          },
          "WorkersComp": {
            "type": "Integer"
          },
           "WorkersCompAmount":{
            "type": "Number"
          },
          "TANF": {
            "type": "Integer"
          },
           "TANFAmount":{
            "type": "Number"
          },
          "GA": {
            "type": "Integer"
          },
           "GAAmount":{
            "type": "Number"
          },
          "SocSecRetirement": {
            "type": "Integer"
          },
           "SocSecRetirementAmount":{
            "type": "Number"
          },
          "Pension": {
            "type": "Integer"
          },
           "PensionAmount":{
            "type": "Number"
          },
          "ChildSupport": {
            "type": "Integer"
          },
           "ChildSupportAmount":{
            "type": "Number"
          },
          "Alimony": {
            "type": "Integer"
          },
           "AlimonyAmount":{
            "type": "Number"
          },
           "OtherIncomeSource": {
            "type": "Integer"
          },
           "OtherIncomeAmount":{
            "type": "Number"
          },
          "OtherIncomeSourceIdentify": {
            "type": "String"
            "maxLength":"50"
          },
           "BenefitsFromAnySource":{
            "type": "Integer"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
- incomeAndSources_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["incomeAndSourcesID"],
      "properties": {
        "incomeAndSourcesID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- incomeAndSourceses_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "incomeAndSourceses",
    "type": "array",
    "items": { "$ref": "#/definitions/incomeAndSources" },
    "definitions": {
      "incomeAndSources": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["incomeAndSourcesID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "incomeAndSourcesID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "IncomeFromAnySource": {
            "type": "Integer"
          },
          "TotalMonthlyIncome":{
            "type": "Number"
          },
          "Earned": {
            "type": "Integer"
          },
          "EarnedAmount":{
            "type": "Number"
          },
          "Unemployment": {
            "type": "Integer"
          },
           "UnemploymentAmount":{
            "type": "Number"
          },
          "SSI": {
            "type": "Integer"
          },
           "SSIAmount":{
            "type": "Number"
          },
          "SSDI": {
            "type": "Integer"
          },
           "SSDIAmount":{
            "type": "Number"
          },
          "VADisabilityService": {
            "type": "Integer"
          },
           "VADisabilityServiceAmount":{
            "type": "Number"
          },
          "PrivateDisability": {
            "type": "Integer"
          },
           "PrivateDisabilityAmount":{
            "type": "Number"
          },
          "WorkersComp": {
            "type": "Integer"
          },
           "WorkersCompAmount":{
            "type": "Number"
          },
          "TANF": {
            "type": "Integer"
          },
           "TANFAmount":{
            "type": "Number"
          },
          "GA": {
            "type": "Integer"
          },
           "GAAmount":{
            "type": "Number"
          },
          "SocSecRetirement": {
            "type": "Integer"
          },
           "SocSecRetirementAmount":{
            "type": "Number"
          },
          "Pension": {
            "type": "Integer"
          },
           "PensionAmount":{
            "type": "Number"
          },
          "ChildSupport": {
            "type": "Integer"
          },
           "ChildSupportAmount":{
            "type": "Number"
          },
          "Alimony": {
            "type": "Integer"
          },
           "AlimonyAmount":{
            "type": "Number"
          },
           "OtherIncomeSource": {
            "type": "Integer"
          },
           "OtherIncomeAmount":{
            "type": "Number"
          },
          "OtherIncomeSourceIdentify": {
            "type": "String"
            "maxLength":"50"
          },
           "BenefitsFromAnySource":{
            "type": "Integer"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
- incomeAndSources_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="IncomeAndSources" type="hmis:incomeAndSources"/>
    </xs:schema>
- incomeAndSourceses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="IncomeAndSourceses" type="hmis:incomeAndSourceses"/>
    </xs:schema>
- inventory_json: |
    "title":"inventory".
    "type": "array",
    "$schema": "http://json-schema.org/draft-04/schema",
    "items": { "$ref": "#/definitions/inventory" },
    "definitions": {
      "inventory":{
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema", 
        "required": ["InventoryID", "ProjectCoID", "InformationDate", "HouseholdType", "UnitInventory", "BedInventory", "HMISParticipatingBeds", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "InventoryID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectCoID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "HouseholdType": {
          "type": "Integer",
          },
          "BedType": {
          "type": "Integer",
          },
          "Availibility": {
          "type": "Integer",
          },
          "Uninventory": {
          "type": "Integer",
          },
          "BedInventory": {
          "type": "Integer",
          },
          "CHBedinventory": {
          "type": "Integer",
          },
          "VetBedinventory": {
          "type": "Integer",
          },
          "YouthBedinventory": {
          "type": "Integer",
          },
          "YouthAgeGroup": {
          "type": "Integer",
          },
          "InventoryStartDate": {
          "type": "string",
          "format": "date-time"
          },
          "InventoryEndDate": {
          "type": "string",
          "format": "date-time"
          },
          "HMISParticipatingBeds": {
          "type": "Integer",
          },
          "DateCreated": {
          "type": "string",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "string",
          "format": "date-time"
          },
          "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
          },
          "DateDeleted": {
          "type": "string",
          "format": "date-time"
          }          
        }      
      }
    }
- inventory_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["InventoryID"],
      "properties": {
        "InventoryID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- inventories_json: |-
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "inventories",
    "type": "array",
    "items": { "$ref": "#/definitions/inventory" },
    "definitions": {
      "inventory": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["InventoryID", "ProjectID", "CoCCode", "InformationDate", "HouseholdType", "UnitInventory", "BedInventory", "HMISParticipatingBeds", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "InventoryID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "CoCCode": {
          "type": "String",
          "maxLength": "6",
          "minLength": "6"
          }'
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "HouseholdType": {
          "type": "Integer",
          },
          "BedType": {
          "type": "Integer",
          },
          "Availibility": {
          "type": "Integer",
          },
          "UnitInventory": {
          "type": "Integer",
          },
          "BedInventory": {
          "type": "Integer",
          },
          "CHBedinventory": {
          "type": "Integer",
          },
          "VetBedinventory": {
          "type": "Integer",
          },
          "YouthBedinventory": {
          "type": "Integer",
          },
          "YouthAgeGroup": {
          "type": "Integer",
          },
          "InventoryStartDate": {
          "type": "string",
          "format": "date-time"
          },
          "InventoryEndDate": {
          "type": "string",
          "format": "date-time"
          },
          "HMISParticipatingBeds": {
          "type": "Integer",
          },
          "DateCreated": {
          "type": "string",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "string",
          "format": "date-time"
          },
          "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
          },
          "DateDeleted": {
          "type": "string",
          "format": "date-time"
          }
      }
    }    
- inventory_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Inventory" type="hmis:inventory"/>
    </xs:schema>
- inventories_xml: |-
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Inventories" type="hmis:inventories"/>
    </xs:schema>
- lastGradeCompleted_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "lastGradeCompleted",
    "type": "object",
    "required": ["LastGradeCompletedID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "LastGradeCompletedID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"     
        },
      "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
      },
      "InformationDate": {
        "type": "String",
        "format": "date-time"
      },
      "LastGradeCompleted": {
        "type": "Integer",
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
        "type": "String",
        "format": "date-time"
      },
      "DateUpdated": {
        "type": "String",
        "format": "date-time"
      },      
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        }
      }
      }
- lastGradeCompleteds_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "lastGradeCompleteds",
    "type": "array",
    "items": { "$ref": "#/definitions/lastGradeCompleted" },
    "definitions": {
      "lastGradeCompleted": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["LastGradeCompletedID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
          "properties": {
            "LastGradeCompletedID": {
              "type": "String",
              "maxLength": "32",
              "minLength": "32" 
            },
            "ProjectEntryID": {
              "type": "String",
              "maxLength": "32",
              "minLength": "32"
            },
            "InformationDate": {
              "type": "String",
              "format": "date-time"
            },
            "LastGradeCompleted": {
              "type": "Integer",
            },
            "DataCollectionStage": {
            "type": "Integer",
            },
            "DateCreated": {
              "type": "String",
              "format": "date-time"
            },
            "DateUpdated": {
              "type": "String",
              "format": "date-time"
            },
            "DateDeleted": {
            "type": "String",
            "format": "date-time"
            }
            "UserID": {
              "type": "String",
              "maxLength": "32",
              "minLength": "32"
              }
          }
        }
- lastGradeCompleted_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["LastGradeCompletedID"],
    "properties": {
      "LastGradeCompletedID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32",
        "minItems": 1,
        "uniqueItems": true,
        "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- lastGradeCompleted_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="LastGradeCompleted" type="hmis:lastGradeCompleted"/>
    </xs:schema>
- lastGradeCompleteds_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="LastGradeCompleteds" type="hmis:lastGradeCompleteds"/>
    </xs:schema>
- lastPermanentAddress_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "lastPermanentAddress",
    "type": "object",    
    "required": ["LastPermanentAddressID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "LastPermanentAddressID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
    },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
     },
      "lastPermanentStreet": {
      "type": "String",
      "maxLength": "100"
      },
      "LastPermanentCity": {
      "type": "String",
      "maxLength": "50"
      },
      "LastPermanentState": {
        "type": "String",
        "maxLength": "2"
      },
      "LastPermanentZip": {
      "type": "String",
      "maxLength": "5"
      },
      "AddressDataQuality": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      }
     }
    }
- lastPermanentAddresses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "lastPermanentAddresses",
    "type": "array",
    "items": { "$ref": "#/definitions/lastPermanentAddress" },
    "definitions": {
    "lastPermanentAddress": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["LastPermanentAddressID","ProjectID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "LastPermanentAddressID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "lastPermanentStreet": {
    "type": "String",
    "maxLength": "100"
    },
    "LastPermanentCity": {
    "type": "String",
    "maxLength": "50"
    },
    "LastPermanentState": {
    "type": "String",
    "maxLength": "2"
    },
    "LastPermanentZip": {
    "type": "String",
    "maxLength": "5"
    },
    "AddressDataQuality": {
    "type": "Integer",
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- lastPermanentAddress_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["LastPermanentAddressID"],
    "properties": {
    "LastPermanentAddressID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32",
    "minItems": 1,
    "uniqueItems": true,
    "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- lastPermanentAddress_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="LastPermanentAddress" type="hmis:lastPermanentAddress"/>
    </xs:schema>
- lastPermanentAddresses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="LastPermanentAddresses" type="hmis:lastPermanentAddresses"/>
    </xs:schema>
- medicalAssistance_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "medicalAssistance",
    "type": "object",    
    "required": ["MedicalAssistanceID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "MedicalAssistanceID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
    },
    "HIVAIDSAssistance": {
    "type": "Integer",
    },
    "NoHIVAIDSAssistanceReason": {
    "type": "Integer",
    },
    "ADAP": {
    "type": "Integer",
    },
    "NoADAPReason": {
    "type": "Integer",
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DataCollectionStage": {
    "type": "Integer",
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- medicalAssistances_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "medicalAssistances",
    "type": "array",
    "items": { "$ref": "#/definitions/medicalAssistance" },
    "definitions": {
    "medicalAssistance": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["MedicalAssistanceID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated",    "UserID"],
    "properties": {
    "MedicalAssistanceID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
    },
    "HIVAIDSAssistance": {
    "type": "Integer",
    },
    "NoHIVAIDSAssistanceReason": {
    "type": "Integer",
    },
    "ADAP": {
    "type": "Integer",
    },
    "NoADAPReason": {
    "type": "Integer",
    },
    "DataCollectionStage": {
    "type": "Integer",
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- medicalAssistance_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["MedicalAssistanceID"],
    "properties": {
    "MedicalAssistanceID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32",
    "minItems": 1,
    "uniqueItems": true,
    "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
    }
    }
    }
- medicalAssistance_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="MedicalAssistance" type="hmis:medicalAssistance"/>
    </xs:schema>
- medicalAssistances_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="MedicalAssistances" type="hmis:medicalAssistances"/>
    </xs:schema>
- nonCashBenefits_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "nonCashBenefits",
    "type": "object",
    "required": ["nonCashBenefitsID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "nonCashBenefitsID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
           "BenefitsFromAnySource":{
            "type": "Integer"
          },
          "SNAP": {
            "type": "Integer"
          },
          "WIC": {
            "type": "Integer"
          },
          "TANFChildCare": {
            "type": "Integer"
          },
          "TANFTransportation": {
            "type": "Integer"
          },
          "OtherTANF": {
            "type": "Integer"
          },
          "RentalAssistanceOngoing": {
            "type": "Integer"
          },
          "RentalAssistanceTemp": {
            "type": "Integer"
          },
          "OtherBenefitsSource": {
            "type": "Integer"
          },
          "OtherBenefitsSourceIdentify": {
            "type": "String"
            "maxLength":"50"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }
      } 
- nonCashBenefits_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["nonCashBenefitsID"],
      "properties": {
        "nonCashBenefitsID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- nonCashBenefitses_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "nonCashBenefitses",
    "type": "array",
    "items": { "$ref": "#/definitions/nonCashBenefits" },
    "definitions": {
      "nonCashBenefits": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["nonCashBenefitsID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "nonCashBenefits": {
          "nonCashBenefitsID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
           "BenefitsFromAnySource":{
            "type": "Integer"
          },
          "SNAP": {
            "type": "Integer"
          },
          "WIC": {
            "type": "Integer"
          },
          "TANFChildCare": {
            "type": "Integer"
          },
          "TANFTransportation": {
            "type": "Integer"
          },
          "OtherTANF": {
            "type": "Integer"
          },
          "RentalAssistanceOngoing": {
            "type": "Integer"
          },
          "RentalAssistanceTemp": {
            "type": "Integer"
          },
          "OtherBenefitsSource": {
            "type": "Integer"
          },
          "OtherBenefitsSourceIdentify": {
            "type": "String"
            "maxLength":"50"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }
      } 
- nonCashBenefits_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="NonCashBenefits" type="hmis:nonCashBenefits"/>
    </xs:schema>  
- nonCashBenefitses_xml: |
   <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="NonCashBenefitses" type="hmis:nonCashBenefitses"/>
    </xs:schema> 
- organization_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["OrganizationID"],
      "properties": {
        "OrganizationID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }  
- organization_ids_json: |
    {
      "type": "array",
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "organization_ids",
      "items": { "$ref": "#/definitions/organization_id" },
        "definitions": {
          "organization_id": {
          "type": "object",
          "$schema": "http://json-schema.org/draft-04/schema",
          "required": ["OrganizationID"],
            "properties": {
              "OrganizationID": {
                "type": "string",
                "minLength": "32",
                "maxLength": "32",
                "minItems": 1,
                "uniqueItems": true,
                "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
              }
            }
          }
        }
      }
- organization_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["OrganizationID", "OrganizationName", "OrganizationCommonName", "DateCreated","DateUpdated","UserID"],
      "properties": {
        "OrganizationID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
         "OrganizationName": {
          "type": "string",
          "maxLength": "80"
        },
         "OrganizationCommonName": {
          "type": "string",
          "maxLength": "80"
        },
         "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "DateDeleted": {
          "type": "string",
          "format": "date-time"
        }
      }
    }      
- organization_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Organization" type="hmis:organization"/>
    </xs:schema>
- organizations_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "organizations",
    "type": "array",
    "items": { "$ref": "#/definitions/"organization },
    "definitions": {
      "organization": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["OrganizationID", "OrganizationName", "OrganizationCommonName", "DateCreated","DateUpdated","UserID"],
       "properties": {
        "OrganizationID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
         "OrganizationName": {
          "type": "string",
          "maxLength": "80"
        },
         "OrganizationCommonName": {
          "type": "string",
          "maxLength": "80"
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        }
        "DateDeleted": {
          "type": "string",
          "format": "date-time"
        },
      }
    } 
- organizations_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Organizations" type="hmis:organizations"/>
- pathStatus_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "pathStatus",
    "type": "object",
    "required": ["PathStatusID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "PathStatusID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "DateOfStatus": {
    "type": "String",
    "format": "date-time"
    },
    "ClientEnrolledInPATH": {
    "type": "Integer",
    },
    "ReasonNotEnrolled": {
    "type": "Integer",
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
      }
     }
    }
- pathStatuses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "pathStatuses",
    "type": "array",
    "items": { "$ref": "#/definitions/pathStatus" },
    "definitions": {
    "pathStatus": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["PathStatusID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "PathStatusID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
        },
        "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        },
        "DateOfStatus": {
        "type": "String",
        "format": "date-time"
        },
        "ClientEnrolledInPATH": {
        "type": "Integer",
        },
        "ReasonNotEnrolled": {
        "type": "Integer",
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        }
     }
    }
- pathStatus_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["PathStatusID"],
    "properties": {
      "PathStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- pathStatus_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="PathStatus" type="hmis:pathStatus"/>
    </xs:schema>
- pathStatuses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="PathStatuses" type="hmis:pathStatuses"/>
    </xs:schema>
- percentAMI_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "percentAMI",
    "type": "object",
    "required": ["PercentAMIID","ProjectEntryID", "DateCreated","ExiteDate", "DateUpdated", "UserID"],
    "properties": {
      "PercentAMIID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32"
      "minLength": "32"
      },
      "PercentAMI": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- percentAMIs_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "percentAMIs",
    "type": "array",
    "items": { "$ref": "#/definitions/percentAMI" },
    "definitions": {
      "percentAMI": {
    "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["PercentAMIID","ProjectEntryID", "DateDeleted", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "PercentAMIID": {
        "type": "String",
        "maxLength": "32",
          "minLength": "32" 
      },
        "ProjectEntryID": {
        "type": "String",
        "maxLength": "32"
        "minLength": "32"
        },
        "PercentAMI": {
        "type": "Integer",
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- percentAMI_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["PercentAMIID"],
      "properties": {
      "PercentAMIID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- percentAMI_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="PercentAMI" type="hmis:percentAMI"/>
    </xs:schema>
- percentAMIs_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="PercentAMIs" type="hmis:percentAMIs"/>
    </xs:schema>
- project_json: |-
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ProjectID","OrganizationID","ProjectName","ProjectCommonName","ContinuumProject","DateCreated", "DateUpdated", "UserID","ExportID"],
      "properties": {
        "ProjectID": {
          "type": "String",
          "minLength": "32",  
          "maxLength": "32"
        },
        "OrganizationID":{
          "type": "String",
          "minLength": "32",  
          "maxLength": "32"
        },  
        "ProjectName": {
          "type": "String",
          "maxLength": "50"
        },
        "ContinuumProject": {
          "type": "Integer"
        },
        "ProjectType": {
          "type": "Integer"
        },
        "ResidentialAffiliation": {
          "type": "Collection(Integer)"
        },
        "TrackingMethod": {
          "type": "Integer"
        },
        "TargetPopulation": {
          "type": "Integer"
        },
        "ProjectCommonName": {
          "type": "String",
          "maxLength": "20"
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
         "ExportID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "DateDeleted": {
          "type": "string",
          "format": "date-time"
        }
      }
    }    
- projects_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "projects",
    "type": "array",
    "items": { "$ref": "#/definitions/project" },
    "definitions": {
      "project": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["ProjectID","OrganizationID","ProjectName","ProjectCommonName","ContinuumProject","DateCreated", "DateUpdated", "UserID","ExportID"],
        "properties": {
        "ProjectID": {
          "type": "String",
          "minLength": "32",  
          "maxLength": "32"
        },
        "OrganizationID":{
          "type": "String",
          "minLength": "32",  
          "maxLength": "32"
        },  
        "ProjectName": {
          "type": "String",
          "maxLength": "50"
        },
        "ContinuumProject": {
          "type": "Integer"
        },
        "ProjectType": {
          "type": "Integer"
        },
        "ResidentialAffiliation": {
          "type": "Collection(Integer)"
        },
        "TrackingMethod": {
          "type": "Integer"
        },
        "TargetPopulation": {
          "type": "Integer"
        },
        "ProjectCommonName": {
          "type": "String",
          "maxLength": "20"
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "ExportID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "DateDeleted": {
          "type": "string",
          "format": "date-time"
        },
      }
    }
- project_coc_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ProjectCoCID"],
      "properties": {
        "ProjectCoCID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- project_coc_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ProjectID", "DateCreated", "DateUpdated", "UserID"],
      "properties": {
        "ProjectCoCID": {
          "type": "String",
          "minLength": "32",  
          "maxLength": "32"
        },
        "ProjectID": {
          "type": "String",
          "minLength": "32",  
          "maxLength": "32"
        },
        "CoCCode": {
          "type": "String",
          "minLength": "6",  
          "maxLength": "6"
        },  
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DateUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "UserID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32"
        },
        "DateDeleted": {
          "type": "string",
          "format": "date-time"
        }          
      }
    }  
- project_cocs_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "project_cocs",
    "type": "array",
    "items": { "$ref": "#/definitions/project_coc" },
    "definitions": {
      "project_coc": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["ProjectCoCID", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "ProjectCoCID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "ProjectID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "CoCCode": {
            "type": "String",
            "minLength": "6",  
            "maxLength": "6"
          },  
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          }
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }          
      }
    }    
- project_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Project" type="hmis:project"/>
    </xs:schema>
- projects_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Projects" type="hmis:projects"/>
    </xs:schema>
- project_coc_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="ProjectCoC" type="hmis:projectCoC"/>
    </xs:schema>
- projects_cocs_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="ProjectsCoC" type="hmis:projectsCoC"/>
    </xs:schema>
- projectCompletionStatus_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "projectCompletionStatus",
    "type": "object",
    "required": ["ProjectCompletionStatusID","ExitID", "DateCreated","ExiteDate", "DateUpdated", "UserID"],
    "properties": {
      "ProjectCompletionStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "ExitID": {
      "type": "String",
      "maxLength": "32"
      "minLength": "32"
      },
      "ProjectCompletionStatus": {
      "type": "Integer",
      },
      "EarlyExitReason": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- projectCompletionStatuses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "projectCompletionStatuses",
    "type": "array",
    "items": { "$ref": "#/definitions/projectCompletionStatus" },
    "definitions": {
      "projectCompletionStatus": {
    "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ProjectCompletionStatusID","ExitID", "DateDeleted", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "ProjectCompletionStatusID": {
        "type": "String",
        "maxLength": "32",
          "minLength": "32" 
      },
        "ExitID": {
        "type": "String",
        "maxLength": "32"
        "minLength": "32"
        },
        "ProjectCompletionStatus": {
        "type": "Integer",
        },
        "EarlyExitReason": {
        "type": "Integer",
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
       }
      }
- projectCompletionStatus_id_json: |
      {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ProjectCompletionStatusID"],
      "properties": {
      "ProjectCompletionStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
      }
      }
- projectCompletionStatus_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="ProjectCompletionStatus" type="hmis:projectCompletionStatus"/>
    </xs:schema>
- projectCompletionStatuses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="ProjectCompletionStatuses" type="hmis:projectCompletionStatuses"/>
    </xs:schema>
- referralSource_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "referralSource",
    "type": "object",    
    "required": ["ReferralSourceID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "ReferralSourceID": {
    "type": "String",
    "maxLength": "32",    
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",    
    "format": "date-time"
    },
    "ReferralSource": {
    "type": "Integer",
    },
    "CountOutreachReferralApproaches": {
    "type": "Integer",
    },
    "DataCollectionStage": {
      "type": "Integer",
      },
    "DateCreated": {
    "type": "String",    
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",    
    "format": "date-time"
    },
    "DateDeleted": {
    "type": "String",    
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- referralSources_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "referralSources",
    "type": "array",
    "items": { "$ref": "#/definitions/referralSource" },
    "definitions": {
    "referralSource": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["ReferralSourceID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated",     "UserID"],
      "properties": {
      "ReferralSourceID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
    },
    "ReferralSource": {
    "type": "Integer",
    },
    "CountOutreachReferralApproaches": {
    "type": "Integer",
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
    "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DataCollectionStage": {
      "type": "Integer",
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    }, 
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
    }
    }
- referralSource_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["ReferralSourceID"],
    "properties": {
    "ReferralSourceID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32",
    "minItems": 1,
    "uniqueItems": true,
    "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
    }
    }
    }
- referralSource_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="ReferralSource" type="hmis:referralSource"/>
    </xs:schema>
- referralSources_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="ReferralSources" type="hmis:referralSources"/>
    </xs:schema>
- residentialMoveInDate_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "residentialMoveInDate",
    "type": "object",
    "required": ["ResidentialMoveInDateID","ProjectEntryID", "DateCreated", "DateUpdated",
    "UserID"],
    "properties": {
      "ResidentialMoveInDateID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InPermanentHousing": {
      "type": "Integer",
      },
      "ResidentialMoveInDate": {
      "type": "String",
      "format": "date-time"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "string",
      "format": "date-time"
      }
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      }
     }
    }
- residentialMoveInDates_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "residentialMoveInDates",
    "type": "array",
    "items": { "$ref": "#/definitions/residentialMoveInDate" },
    "definitions": {
      "residentialMoveInDate": {
      "type": "object",      
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ResidentialMoveInDateID","ProjectEntryID","DateCreated","DateUpdated", "UserID"],
      "properties": {
      "ResidentialMoveInDateID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InPermanentHousing": {
      "type": "Integer",
      },
      "ResidentialMoveInDate": {
      "type": "String",
      "format": "date-time"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"  
      }
     }
    }
- residentialMoveInDate_id_json: |
      {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["ResidentialMoveInDateID"],
        "properties": {
          "ResidentialMoveInDateID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
          }
        }
      }
- residentialMoveInDate_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="ResidentialMoveInDate" type="hmis:residentialMoveInDate"/>
    </xs:schema>
- residentialMoveInDates_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="ResidentialMoveInDates" type="hmis:residentialMoveInDates"/>
    </xs:schema>
- rhyBCPStatus_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "rhyBCPStatus",
    "type": "object",
    "required": ["RhyBCPStatusID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "RhyBCPStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "StatusDate": {
      "type": "String",
      "format": "date-time"
      },
      "FYSBYouth": {
      "type": "Integer",
      },
      "ReasonNoServices": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"  
      }
     }
    }
- rhyBCPStatuses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "rhyBCPStatuses",
    "type": "array",
    "items": { "$ref": "#/definitions/rhyBCPStatus" },
    "definitions": {
      "rhyBCPStatus": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["RhyBCPStatusID","ProjectID","ProjectEntryID",  "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "RhyBCPStatusID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32" 
          },
          "ProjectEntryID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "StatusDate": {
          "type": "String",
          "format": "date-time"
          },
          "FYSBYouth": {
          "type": "Integer",
          },
          "ReasonNoServices": {
          "type": "Integer",
          },
          "DateCreated": {
          "type": "String",
          "format": "date-time"
          },
          "DateUpdated": {
          "type": "String",
          "format": "date-time"
          },
          "DateDeleted": {
          "type": "String",
          "format": "date-time"
          },
          "UserID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          }
        }
      }
- rhyBCPStatus_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["RhyBCPStatusID"],
    "properties": {
      "RhyBCPStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32",
      "minItems": 1,
      "uniqueItems": true,
      "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- rhyBCPStatus_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="RhyBCPStatus" type="hmis:rhyBCPStatus"/>
    </xs:schema>
- rhyBCPStatuses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="RhyBCPStatuses" type="hmis:rhyBCPStatuses"/>
    </xs:schema>
- schoolStatus_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "schoolStatus",
    "type": "object",
    "required": ["SchoolStatusID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "SchoolStatusID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
      },
      "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        },
      "InformationDate": {
        "type": "String",
        "format": "date-time"
      },
      "SchoolStatus": {
        "type": "Integer",
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
        "type": "String",
        "format": "date-time"
      },
      "DateUpdated": {
        "type": "String",
        "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        }
      }
    }
- schoolStatuses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "schoolStatuses",
    "type": "array",
    "items": { "$ref": "#/definitions/schoolStatus" },
    "definitions": {
      "schoolStatus": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["SchoolStatusID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
          "properties": {
            "SchoolStatusID": {
              "type": "String",
              "maxLength": "32",
              "minLength": "32" 
            },
            "ProjectEntryID": {
              "type": "String",
              "maxLength": "32",
              "minLength": "32"
            },
            "InformationDate": {
              "type": "String",
              "format": "date-time"
            },
            "SchoolStatus": {
              "type": "Integer",
            },
            "DataCollectionStage": {
            "type": "Integer",
            },
            "DateCreated": {
              "type": "String",
              "format": "date-time"
            },
            "DateUpdated": {
              "type": "String",
              "format": "date-time"
            },
            "DateDeleted": {
              "type": "String",
              "format": "date-time"
            },
            "UserID": {
              "type": "String",
              "maxLength": "32",
              "minLength": "32"
              }
            }
        }
- schoolStatus_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["SchoolStatusID"],
    "properties": {
      "SchoolStatusID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32",
        "minItems": 1,
        "uniqueItems": true,
        "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- schoolStatus_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="SchoolStatus" type="hmis:schoolStatus"/>
    </xs:schema>
- schoolStatuses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="SchoolStatuses" type="hmis:schoolStatuses"/>
    </xs:schema>
- services_json: |-
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "services",
    "type": "object",
    "required": ["servicesID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
      "properties": {
         "servicesID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "DateProvided": {
          "type": "string",
          "format": "date-time"
          },
          "RecordType":{
          "type": "Integer"
          },
          "TypeProvided":{
          "type": "Integer"
          },
          "OtherTypeProvided":{
          "type": "Integer"
          },
          "SubTypeProvided":{
          "type": "Integer"
          },
          "FAAmount":{
          "type": "Number"
          },
          "ReferralOutcome":{
          "type": "Integer"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }  
      }
- services_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["ServicesID"],
      "properties": {
        "servicesID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23"
        }
      }
    }
- serviceses_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "serviceses",
      "type": "array",
      "items": { "$ref": "#/definitions/services" },
      "definitions": { 
      "services": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["servicesesID", "ProjectEntryID", "InformationDate", "DataCollectionStage","DateCreated", "DateUpdated", "UserID"],
        "properties": {
         "servicesID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "ProjectEntryID": {  
          "type": "String",
          "maxLength": "32",
          "minLength": "32"
          },
          "InformationDate": {
          "type": "string",
          "format": "date-time"
          },
          "DateProvided": {
          "type": "string",
          "format": "date-time"
          },
          "RecordType":{
          "type": "Integer"
          },
          "TypeProvided":{
          "type": "Integer"
          },
          "OtherTypeProvided":{
          "type": "Integer"
          },
          "SubTypeProvided":{
          "type": "Integer"
          },
          "FAAmount":{
          "type": "Number"
          },
          "ReferralOutcome":{
          "type": "Integer"
          },
          "DataCollectionStage"{
            "type": "Integer"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }  
      }
- services_xml: |
     <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Services" type="hmis:services"/>
      </xs:schema>
- serviceses_xml: |
     <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Serviceses" type="hmis:serviceses"/>
      </xs:schema>
- sexualOrientation_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "sexualOrientation",
    "type": "object",
    "required": ["SexualOrientationID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "SexualOrientationID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
      },
      "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
      },
      "InformationDate": {
        "type": "String",
        "format": "date-time"
      },  
      "SexualOrientation": {
        "type": "Integer",
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
        "type": "String",
        "format": "date-time"
      },
      "DateUpdated": {
        "type": "String",
        "format": "date-time"
      },
      "DateDeleted": {
        "type": "String",
        "format": "date-time"
      },  
      "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"  
      }
     }
    }
- sexualOrientations_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "sexualOrientations",
    "type": "array",
    "items": { "$ref": "#/definitions/sexualOrientation" },
    "definitions": {
      "sexualOrientation": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["SexualOrientationID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
      "SexualOrientationID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
      },
      "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
      },
      "InformationDate": {
        "type": "String",
        "format": "date-time"
      },
      "SexualOrientation": {
        "type": "Integer",
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
        "type": "String",
        "format": "date-time"
      },
      "DateUpdated": {
        "type": "String",
        "format": "date-time"
      },      
      "DateDeleted": {
        "type": "String",
        "format": "date-time"
      },
      "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
      }
     }
    }
- sexualOrientation_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["SexualOrientationID"],
    "properties": {
      "SexualOrientationID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32",
        "minItems": 1,
        "uniqueItems": true,
        "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
      }
     }
    }
- sexualOrientation_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="SexualOrientation" type="hmis:sexualOrientation"/>
    </xs:schema>
- sexualOrientations_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="SexualOrientations" type="hmis:sexualOrientations"/>
    </xs:schema>
- site_json: |
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "title":"site",
    "required": ["SiteID", "ProjectID", "CoCCode", "PrincipalSite", "Geocode",   "DateCreated", "DateUpdated", "UserID"],
    "properties": {
          "SiteID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "ProjectID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "CoCCode": {
            "type": "String",
            "minLength": "6",  
            "maxLength": "6"
          },
          "PrincipalSite": {
            "type": "Integer"
          },
          "Geocode": {
            "type": "String",
            "minLength": "6",  
            "maxLength": "6"
          },
          "Address": {
            "type": "String",  
            "maxLength": "100"
          },
          "City": {
            "type": "String",  
            "maxLength": "50"
          },
          "State": {
            "type": "String",  
            "maxLength": "2"
          },
          "ZIP": {
            "type": "String",  
            "maxLength": "5"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          }
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }
        }          
      }
    }
- site_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["SiteID"],
      "properties": {
        "SiteID": {
          "type": "string",
          "minLength": "32",
          "maxLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "ghwgqgwhwhwgwbgwtsgdhsy67yt232gs"
        }
      }
    }
- sites_json: |
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "sites",
    "type": "array",
    "items": { "$ref": "#/definitions/site" },
    "definitions": {
      "site": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["SiteID", "ProjectID", "CoCCode", "PrincipalSite", "Geocode", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
          "SiteID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "ProjectID": {
            "type": "String",
            "minLength": "32",  
            "maxLength": "32"
          },
          "CoCCode": {
            "type": "String",
            "minLength": "6",  
            "maxLength": "6"
          },
          "PrincipalSite": {
            "type": "Integer"
          },
          "Geocode": {
            "type": "String",
            "minLength": "6",  
            "maxLength": "6"
          },
          "Address": {
            "type": "String",  
            "maxLength": "100"
          },
          "City": {
            "type": "String",  
            "maxLength": "50"
          },
          "State": {
            "type": "String",  
            "maxLength": "2"
          },
          "ZIP": {
            "type": "String",  
            "maxLength": "5"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "type": "string",
            "minLength": "32",
            "maxLength": "32"
          }
          "DateDeleted": {
            "type": "string",
            "format": "date-time"
          }          
      }
    }
- site_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Site" type="hmis:site"/>
    </xs:schema>
- sites_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
      <xs:element name="Sites" type="hmis:sites"/>
    </xs:schema>  
- worstHousingSituation_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "worstHousingSituation",
    "type": "object",
    "required": ["worstHousingSituationID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "WorstHousingSituationID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
        },
        "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        },
        "WorstHousingSituation": {
        "type": "Integer",
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        }
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        }
      }
    }
- worstHousingSituations_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "worstHousingSituations",
    "type": "array",
    "items": { "$ref": "#/definitions/worstHousingSituation" },
      "definitions": {
        "worstHousingSituation": {
          "type": "object",
          "$schema": "http://json-schema.org/draft-04/schema",
          "required": ["worstHousingSituationID","ProjectEntryID", "DateCreated", "DateUpdated", "UserID"],
            "properties": {
              "worstHousingSituationID": {
                "type": "String",
                "maxLength": "32",
                "minLength": "32" 
                },
                "ProjectEntryID": {
                "type": "String",
                "maxLength": "32",
                "minLength": "32"
                },
                "WorstHousingSituation": {
                "type": "Integer",
                },
                "DateCreated": {
                "type": "String",
                "format": "date-time"
                },
                "DateUpdated": {
                "type": "String",
                "format": "date-time"
                },
                "DateDeleted": {
                "type": "String",
                "format": "date-time"
                },
                "UserID": {
                "type": "String",
                "maxLength": "32",
                "minLength": "32"  
                }
              }
            }
- worstHousingSituation_id_json: |
    {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["WorstHousingSituationID"],
      "properties": {
        "WorstHousingSituationID": {
          "type": "String",
          "maxLength": "32",
          "minLength": "32",
          "minItems": 1,
          "uniqueItems": true,
          "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
        }
      }
    }
- worstHousingSituation_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="WorstHousingSituation" type="hmis:worstHousingSituation"/>
    </xs:schema>
- worstHousingSituations_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="WorstHousingSituations" type="hmis:worstHousingSituations"/>
    </xs:schema>
- youthCriticalIssues_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "youthCriticalIssues",
    "type": "object",
    "required": ["YouthCriticalIssuesID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "YouthCriticalIssuesID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InformationDate": {
      "type": "String",
      "format": "date-time"
      },
      "HouseholdDynamics": {
      "type": "Integer",
      },
      "SexualOrientationGenderIDYouth": {
      "type": "Integer",
      },
      "SexualOrientationGenderIDFam": {
      "type": "Integer",
      },
      "HousingIssuesYouth": {
      "type": "Integer",
      },
      "HousingIssuesYouth": {
      "type": "Integer",
      },
      "SchoolEducationalIssuesYouth": {
      "type": "Integer",
      },
      "SchoolEducationalIssuesFam": {
      "type": "Integer",
      },
      "UnemploymentYouth": {
      "type": "Integer",
      },
      "UnemploymentFam": {
      "type": "Integer",
      },
      "MentalHealthIssuesYouth": {
      "type": "Integer",
      },
      "MentalHealthIssuesFam": {
      "type": "Integer",
      },
      "HealthIssuesYouth": {
      "type": "Integer",
      },
      "HealthIssuesFam": {
      "type": "Integer",
      },
      "PhysicalDisabilityYouth": {
      "type": "Integer",
      },
      "PhysicalDisabilityFam": {
      "type": "Integer",
      },
      "MentalDisabilityYouth": {
      "type": "Integer",
      },
      "MentalDisabilityFam": {
      "type": "Integer",
      },
      "AbuseAndNeglectYouth": {
      "type": "Integer",
      },
      "AbuseAndNeglectFam": {
      "type": "Integer",
      },
      "AlcoholDrugAbuseYouth": {
      "type": "Integer",
      },
      "AlcoholDrugAbuseFam": {
      "type": "Integer",
      },
      "InsufficientIncome": {
      "type": "Integer",
      },
      "IncarceratedParent": {
      "type": "Integer",
      },
      "IncarceratedParentStatus": {
      "type": "Integer",
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",  
      "format": "date-time"
      },  
      "DateDeleted": {
      "type": "String",  
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
- youthCriticalIssueses_json: |
      "$schema": "http://json-schema.org/draft-04/schema",
      "title": "youthCriticalIssueses",
      "type": "array",
      "items": { "$ref": "#/definitions/youthCriticalIssues" },
      "definitions": {
      "youthCriticalIssues": {
        "type": "object",        
        "$schema": "http://json-schema.org/draft-04/schema",
        "required": ["YouthCriticalIssuesID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
        "properties": {
        "YouthCriticalIssuesID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32" 
        },
        "ProjectEntryID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"
        },
        "InformationDate": {
        "type": "String",    
        "format": "date-time"
        },
        "HouseholdDynamics": {
        "type": "Integer",
        },
        "SexualOrientationGenderIDYouth": {
        "type": "Integer",
        },
        "SexualOrientationGenderIDFam": {
        "type": "Integer",
        },
        "HousingIssuesYouth": {
        "type": "Integer",
        },
        "HousingIssuesYouth": {
        "type": "Integer",
        },
        "SchoolEducationalIssuesYouth": {
        "type": "Integer",
        },
        "SchoolEducationalIssuesFam": {
        "type": "Integer",
        },
        "UnemploymentYouth": {
        "type": "Integer",
        },
        "UnemploymentFam": {
        "type": "Integer",
        },
        "MentalHealthIssuesYouth": {
        "type": "Integer",
        },
        "MentalHealthIssuesFam": {
        "type": "Integer",
        },
        "HealthIssuesYouth": {
        "type": "Integer",
        },
        "HealthIssuesFam": {
        "type": "Integer",
        },
        "PhysicalDisabilityYouth": {
        "type": "Integer",
        },
        "PhysicalDisabilityFam": {
        "type": "Integer",
        },
        "MentalDisabilityYouth": {
        "type": "Integer",
        },
        "MentalDisabilityFam": {
        "type": "Integer",
        },
        "AbuseAndNeglectYouth": {
        "type": "Integer",
        },
        "AbuseAndNeglectFam": {
        "type": "Integer",
        },
        "AlcoholDrugAbuseYouth": {
        "type": "Integer",
        },
        "AlcoholDrugAbuseFam": {
        "type": "Integer",
        },
        "InsufficientIncome": {
        "type": "Integer",
        },
        "IncarceratedParent": {
        "type": "Integer",
        },
        "IncarceratedParentStatus": {
        "type": "Integer",
        },
        "DataCollectionStage": {
        "type": "Integer",
        },
        "DateDeleted": {
        "type": "String",
        "format": "date-time"
        },
        "DateCreated": {
        "type": "String",
        "format": "date-time"
        },
        "DateUpdated": {
        "type": "String",
        "format": "date-time"
        },
        "UserID": {
        "type": "String",
        "maxLength": "32",
        "minLength": "32"}
      }
      }
- youthCriticalIssues_id_json: |
    {
    "type": "object",
    "$schema": "http://json-schema.org/draft-04/schema",
    "required": ["YouthCriticalIssuesID"],
    "properties": {
    "YouthCriticalIssuesID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32",
    "minItems": 1,
    "uniqueItems": true,
    "example": "invgqgwhwnnhhwgwbgwtsgdhsy67yt23" 
    }
    }
    }
- youthCriticalIssues_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"  xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd"> 
    <xs:element name="YouthCriticalIssues" type="hmis:youthCriticalIssues"/>
    </xs:schema>
- youthCriticalIssueses_xml: |
    <xs:schema attributeFormDefault="qualified"    elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"            xmlns:hmis="https://raw.githubusercontent.com/hmis-api/xml/v4.0.1/src/HUD_HMIS.xsd">
    <xs:element name="YouthCriticalIssueses" type="hmis:youthCriticalIssueses"/>
    </xs:schema>
    - healthStatus_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "healthStatus",
    "type": "object",
    "required": ["HealthStatusID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
      "HealthStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InformationDate": {
      "type": "String",
      "format": "date-time"
      },
      "HealthCategory": {
      "type": "Integer",
      },
      "HealthStatus": {
      "type": "Integer",
      },
      "DueDate": {
      "type": "String",
      "format": "date-time"
      },
      "DataCollectionStage": {
      "type": "Integer",
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
      - healthStatuses_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "healthStatuses",
    "type": "array",
    "items": { "$ref": "#/definitions/healthStatus" },
    "definitions": {
      "healthStatus": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema",
      "required": ["HealthStatusID","ProjectID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated","UserID"],
      "properties": {
      "HealthStatusID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32" 
      },
      "ProjectEntryID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"
      },
      "InformationDate": {
      "type": "String",
      "format": "date-time"
      },
      "HealthCategory": {
      "type": "Integer",
      },
      "HealthStatus": {
      "type": "Integer",
      },
      "DueDate": {
      "type": "String",
      "format": "date-time"
      },
       "DataCollectionStage": {
      "type": "Integer",
      },
      "DateDeleted": {
      "type": "String",
      "format": "date-time"
      },
      "DateCreated": {
      "type": "String",
      "format": "date-time"
      },
      "DateUpdated": {
      "type": "String",
      "format": "date-time"
      },
      "UserID": {
      "type": "String",
      "maxLength": "32",
      "minLength": "32"}
      }
      }
      - formerWardJuvenileJustice_json: |
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "formerWardJuvenileJustice",
    "type": "object",
    "required": ["FormerWardJuvenileJusticeID","ProjectEntryID", "InformationDate", "DataCollectionStage", "DateCreated", "DateUpdated", "UserID"],
    "properties": {
    "FormerWardJuvenileJusticeID": {    
    "type": "String",
    "maxLength": "32",
    "minLength": "32" 
    },
    "ProjectEntryID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"
    },
    "InformationDate": {
    "type": "String",
    "format": "date-time"
    },
    "FormerWardJuvenileJustice": {
    "type": "Integer",
    },
    "JuvenileJusticeYears": {
    "type": "Integer",
    },
    "JuvenileJusticeMonths": {
    "type": "Integer",
    },
    "DataCollectionStage": {
    "type": "Integer",
    },
    "DateCreated": {
    "type": "String",
    "format": "date-time"
    },
      "DateUpdated": {
    "type": "String",
    "format": "date-time"
    },
    "DateDeleted": {
    "type": "String",
    "format": "date-time"
    },
    "UserID": {
    "type": "String",
    "maxLength": "32",
    "minLength": "32"}
      }
    }